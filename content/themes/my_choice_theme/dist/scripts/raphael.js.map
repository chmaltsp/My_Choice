{"version":3,"sources":["../bower_components/raphael/raphael.js"],"names":["glob","current_event","stop","version","has","separator","wildcard","fun","numsort","a","b","events","n","eve","name","scope","String","l","oldstop","args","Array","prototype","slice","call","arguments","listeners","z","indexed","queue","out","ce","i","ii","length","push","zIndex","sort","apply","_events","item","items","k","j","jj","nes","names","split","e","es","concat","f","on","hasOwnProperty","event","attrs","nt","subname","RegExp","test","nts","off","unbind","key","splice","cur","funcs","once","f2","this","toString","module","exports","define","window","factory","amd","require","R","first","is","loaded","array","_engine","create","nu","add","pop","clone","obj","Object","res","constructor","repush","cacher","postprocessor","newf","arg","join","cache","count","shift","clrToString","hex","catmullRom2bezier","crp","d","iLen","p","x","y","base3","t","p1","p2","p3","p4","t1","t2","bezlen","x1","y1","x2","y2","x3","y3","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","math","sqrt","getTatLen","ll","step","abs","intersect","mmax","mmin","nx","ny","denominator","px","py","px2","toFixed","py2","interHelper","bez1","bez2","justCount","bbox1","bezierBBox","bbox2","isBBoxIntersect","l1","l2","n1","n2","dots1","dots2","xy","findDotsAtSegment","di","di1","dj","dj1","ci","cj","interPathHelper","path1","path2","_path2curve","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","Matrix","c","x_y_w_h","S","width","height","CubicBezierAtTime","p1x","p1y","p2x","p2y","duration","sampleCurveX","ax","bx","cx","solve","epsilon","solveCurveX","ay","by","cy","t0","d2","Animation","anim","ms","percents","newAnim","times","attr","toFloat","sortByNumber","top","runAnimation","element","percent","status","totalOrigin","params","isInAnim","isInAnimSet","next","prev","timestamp","from","to","diff","animationElements","el","id","initstatus","start","Date","availableAnimAttrs","paper","customAttributes","availableAttrs","getRGB","toColour","r","g","pathes","path2curve","toPath","_","eq","equaliseTransform","real","m","matrix","to2","transform","getBBox","extractTransform","values","Str","from2","easing","easyeasy","easing_formulas","match","bezierrg","curve","pipe","del","callback","repeat","origin","animation","requestAnimFrame","stopAnimation","paperproto","elements","circle","rect","path","ellipse","text","image","formatrg","doc","document","win","oldRaphael","was","Raphael","Paper","ca","supportsTouch","DocumentTouch","E","touchMap","mousedown","mousemove","mouseup","lowerCase","toLowerCase","Math","max","min","pow","PI","string","objectToString","colourRegExp","_ISURL","isnan","NaN","Infinity","-Infinity","round","parseFloat","toInt","parseInt","upperCase","toUpperCase","_availableAttrs","arrow-end","arrow-start","blur","clip-rect","cursor","fill","fill-opacity","font","font-family","font-size","font-style","font-weight","gradient","href","letter-spacing","opacity","rx","ry","src","stroke","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","target","text-anchor","title","_availableAnimAttrs","commaSpaces","hsrg","hs","rg","p2s","pathCommand","tCommand","pathValues","eldata","_radial_gradient","rectPath","_rectPath","w","h","ellipsePath","getPath","_getPath","bbox","_getBBox","set","mapPath","pathi","_g","type","SVGAngle","implementation","hasFeature","createElement","innerHTML","firstChild","style","behavior","adj","svg","vml","_Paper","fn","_id","_oid","o","isArray","angle","atan2","rad","deg","snapTo","value","tolerance","rem","createUUID","uuidRegEx","uuidReplacer","replace","random","v","setWindow","newwin","initWin","toHex","color","bod","trim","docum","ActiveXObject","write","close","body","createPopup","range","createTextRange","queryCommandValue","display","appendChild","defaultView","getComputedStyle","getPropertyValue","hsbtoString","s","hsltoString","rgbtoString","prepareRGB","clr","packageRGB","rgb","hsb2rgb","hsl2rgb","rgb2hsl","rgb2hsb","G","B","X","C","H","V","L","M","_path2string","_preload","img","cssText","onload","removeChild","onerror","colour","indexOf","error","substring","charAt","red","green","blue","hsb","hsl","getColor","reset","parsePathString","pathString","pth","paths","arr","pathClone","paramCounts","q","data","parseTransformString","TString","ps","sleep","setTimeout","c1x","c1y","c2x","c2y","t13","t12","t3","mx","my","alpha","end","curveDim","isPointInsideBBox","pathIntersection","pathIntersectionNumber","isPointInsidePath","pathBBox","_removedFactory","methodname","pathDimensions","Y","dim","xmin","ymin","xmax","ymax","bb","pathArray","pathToRelative","_pathToRelative","rel","pa","len","pathToAbsolute","_pathToAbsolute","crz","dots","l2c","q2c","_13","_23","a2c","large_arc_flag","sweep_flag","recursive","_120","rotate","cos","sin","f1","rx2","ry2","asin","df","f2old","x2old","y2old","c1","s1","c2","s2","tan","hx","hy","m1","m2","m3","m4","newres","findDotAtSegment","dot","qx","qy","attrs2","processPath","pcom","tq","T","Q","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","tear","_parseDots","par","offset","_tear","bottom","toMatrix","_tofront","_toback","_insertafter","el2","_insertbefore","transformPath","_extractTransform","tstr","tdata","dx","dy","sx","sy","tlen","command","absolute","inver","invert","translate","scale","dirtyT","getEmpty","_equaliseTransform","tt1","tt2","maxlength","_getContainer","container","getElementById","tagName","pixelWidth","offsetWidth","pixelHeight","offsetHeight","matrixproto","norm","normalize","mag","me","get","fromCharCode","toFilter","row","scalex","shear","scaley","acos","isSimple","isSuperSimple","noRotation","toTransformString","shorter","navigator","userAgent","safari","vendor","platform","remove","preventDefault","returnValue","preventTouch","originalEvent","stopPropagation","cancelBubble","stopTouch","getEventPosition","scrollY","documentElement","scrollTop","scrollX","scrollLeft","clientX","clientY","addEvent","addEventListener","pos","_f","olde","targetTouches","removeEventListener","attachEvent","detacher","detachEvent","drag","dragMove","dragi","touches","touch","identifier","_drag","node","nextSibling","parent","parentNode","opera","getElementByPoint","insertBefore","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","elproto","eventName","shape","removeData","getData","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","onDragOver","undrag","unmousedown","__set__","format","itemsArray","Set","setStart","setFinish","getSize","canvas","setSize","setViewBox","fit","raphael","getOffset","elem","box","getBoundingClientRect","ownerDocument","docElem","clientTop","clientLeft","pageYOffset","left","pageXOffset","elementFromPoint","so","sr","createSVGRect","hits","getIntersectionList","getById","raphaelid","getElementsByBBox","forEach","bot","thisArg","getElementsByPoint","isPointInside","rp","realPath","isWithoutTransform","removed","dirty","bboxwt","glow","offsetx","offsety","getPointAtSegmentLength","getLengthFactory","istotal","subpath","onlystart","point","sp","subpaths","getTotalLength","getPointAtLength","getSubpathsAtLength","getSubpath","ef","linear","<",">","<>","backIn","backOut","elastic","bounce","easeIn","easeOut","easeInOut","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","Now","paused","now","time","that","init","upto255","animateWith","onAnimation","delay","floor","json",100,"lastKey","animate","setTime","pause","resume","setproto","method","clear","index","insertion","tail","todel","arglen","exclude","collector","insertAfter","glowConfig","ret","shape2","index2","registerFont","face","fonts","fontcopy","glyphs","family","prop","glyph","getFont","weight","stretch","normal","bold","lighter","bolder","fontName","thefont","print","size","letter_spacing","line_spacing","letters","notfirst","lineHeight","shifty","descent","curr","token","str","fullfill","tokenRegex","objNotationRegex","replacer","all","quote","quotedName","isFunc","ninja","st","isLoaded","readyState","xlink","markers","block","classic","diamond","open","oval","markerCounter","$","setAttributeNS","setAttribute","createElementNS","webkitTapHighlightColor","addGradientFill","fx","fy","SVG","_fx","_fy","dir","isNaN","vector","defs","gradientTransform","stop-color","location","fillOpacity","updatePosition","pattern","patternTransform","addArrow","isEnd","refX","se","arrows","endPath","endMarker","startPath","startMarker","pathId","markerId","use","marker","getElementsByTagName","markerHeight","markerWidth","orient","refY","xlink:href","delta","startdx","enddx","dasharray","none","-",".","-.","-..",". ","- ","--","- .","--.","--..","addDashes","butt","square","dashes","setFillAndStroke","vis","visibility","att","nodeValue","val","createTextNode","pn","hl","clip","rc","clip-path","getAttribute","startString","endString","isURL","ig","patternUnits","stops","stop-opacity","cssrule","tuneText","leading","fontSize","tspan","texts","tspans","dif","getRealNode","Element","sw","hide","show","containerStyle","canvasHidden","parentElement","clientWidth","clientHeight","def","subkey","toFront","toBack","afterNode","beforeNode","fltr","stdDeviation","_blur","filter","removeAttribute","preserveAspectRatio","_viewBox","con","Error","isFloating","cnvs","css","xmlns","xmlns:xlink","_left","_top","renderfix","vb","paperSize","aspectRatio","_vbSize","viewBox","getScreenCTM","createSVGMatrix","desc","fillString","map","Z","bites","blurregexp","cssDot","zoom","pathTypes","ovalTypes","path2vml","total","vals","isMove","compensation","setCoords","fillpos","flip","kx","ky","coordsize","rotation","coordorigin","fillsize","position","newpath","isOval","div","clipRect","dstyle","textpath","textpathStyle","fontFamily","fontWeight","fontStyle","newfill","createNode","newstroke","strokeColor","joinstyle","miterlimit","endcap","dashstyle","span","brect","W","right","dirtyattrs","dd","bbx","fxfy","color2","clrs","colors","focus","focussize","focusposition","oldt","vbs","_viewBoxShift","vbt","skew","isGrad","isPatt","bbt","auxGetBBox","runtimeStyle","margin","Path","textpathok","cs","styleSheets","createStyleSheet","addRule","namespaces","rvml"],"mappings":"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","file":"raphael.js","sourcesContent":["// ┌────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.1.4 - JavaScript Vector Library                          │ \\\\\n// ├────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2012 Dmitry Baranovskiy (http://raphaeljs.com)    │ \\\\\n// │ Copyright © 2008-2012 Sencha Labs (http://sencha.com)              │ \\\\\n// ├────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (http://raphaeljs.com/license.html) license.│ \\\\\n// └────────────────────────────────────────────────────────────────────┘ \\\\\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.4.2\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners\n    \\*/\n        eve = function (name, scope) {\n\t\t\tname = String(name);\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out.length ? out : null;\n        };\n\t\t// Undocumented. Debug only.\n\t\teve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    \n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt()` function will be called before `eatIt()`.\n\t *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n\t\tname = String(name);\n\t\tif (typeof f != \"function\") {\n\t\t\treturn function () {};\n\t\t}\n        var names = name.split(separator),\n            e = events;\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            e = e.n;\n            e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n        }\n        e.f = e.f || [];\n        for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n            return fun;\n        }\n        e.f.push(f);\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n\t * Arguments that will be passed to the result function will be also\n\t * concated to the list of final arguments.\n \t | el.onclick = eve.f(\"click\", 1, 2);\n \t | eve.on(\"click\", function (a, b, c) {\n \t |     console.log(a, b, c); // 1, 2, [event object]\n \t | });\n     > Arguments\n\t - event (string) event name\n\t - varargs (…) and any other arguments\n\t = (function) possible event handler function\n    \\*/\n\teve.f = function (event) {\n\t\tvar attrs = [].slice.call(arguments, 1);\n\t\treturn function () {\n\t\t\teve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t\t};\n\t};\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);\n        }\n        return current_event;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n\t * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n\t\tif (!name) {\n\t\t    eve._events = events = {n: {}};\n\t\t\treturn;\n\t\t}\n        var names = name.split(separator),\n            e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.unbind(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define != \"undefined\" ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(window || this);\n// ┌─────────────────────────────────────────────────────────────────────┐ \\\\\n// │ \"Raphaël 2.1.2\" - JavaScript Vector Library                         │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\\\\n// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\\\\n// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\\\\n// └─────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define === \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function( eve ) {\n            return factory(glob, eve);\n        });\n    } else {\n        // Browser globals (glob is window)\n        // Raphael adds itself to window\n        factory(glob, glob.eve || (typeof require == \"function\" && require('eve')) );\n    }\n}(this, function (window, eve) {\n    /*\\\n     * Raphael\n     [ method ]\n     **\n     * Creates a canvas object on which to draw.\n     * You must do this first, as all future calls to drawing methods\n     * from this instance will be bound to this canvas.\n     > Parameters\n     **\n     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n     - width (number)\n     - height (number)\n     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n     * or\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n     * or\n     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n     * or\n     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n     = (object) @Paper\n     > Usage\n     | // Each of the following examples create a canvas\n     | // that is 320px wide by 200px high.\n     | // Canvas is created at the viewport’s 10,50 coordinate.\n     | var paper = Raphael(10, 50, 320, 200);\n     | // Canvas is created at the top left corner of the #notepad element\n     | // (or its top right corner in dir=\"rtl\" elements)\n     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n     | // Same as above\n     | var paper = Raphael(\"notepad\", 320, 200);\n     | // Image dump\n     | var set = Raphael([\"notepad\", 320, 200, {\n     |     type: \"rect\",\n     |     x: 10,\n     |     y: 10,\n     |     width: 25,\n     |     height: 25,\n     |     stroke: \"#f00\"\n     | }, {\n     |     type: \"text\",\n     |     x: 30,\n     |     y: 40,\n     |     text: \"Dump\"\n     | }]);\n    \\*/\n    function R(first) {\n        if (R.is(first, \"function\")) {\n            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n        } else if (R.is(first, array)) {\n            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n        } else {\n            var args = Array.prototype.slice.call(arguments, 0);\n            if (R.is(args[args.length - 1], \"function\")) {\n                var f = args.pop();\n                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n                    f.call(R._engine.create[apply](R, args));\n                });\n            } else {\n                return R._engine.create[apply](R, arguments);\n            }\n        }\n    }\n    R.version = \"2.1.2\";\n    R.eve = eve;\n    var loaded,\n        separator = /[, ]+/,\n        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n        formatrg = /\\{(\\d+)\\}/g,\n        proto = \"prototype\",\n        has = \"hasOwnProperty\",\n        g = {\n            doc: document,\n            win: window\n        },\n        oldRaphael = {\n            was: Object.prototype[has].call(g.win, \"Raphael\"),\n            is: g.win.Raphael\n        },\n        Paper = function () {\n            /*\\\n             * Paper.ca\n             [ property (object) ]\n             **\n             * Shortcut for @Paper.customAttributes\n            \\*/\n            /*\\\n             * Paper.customAttributes\n             [ property (object) ]\n             **\n             * If you have a set of attributes that you would like to represent\n             * as a function of some number you can do it easily with custom attributes:\n             > Usage\n             | paper.customAttributes.hue = function (num) {\n             |     num = num % 1;\n             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n             | };\n             | // Custom attribute “hue” will change fill\n             | // to be given hue with fixed saturation and brightness.\n             | // Now you can use it like this:\n             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n             | // or even like this:\n             | c.animate({hue: 1}, 1e3);\n             |\n             | // You could also create custom attribute\n             | // with multiple parameters:\n             | paper.customAttributes.hsb = function (h, s, b) {\n             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n             | };\n             | c.attr({hsb: \"0.5 .8 1\"});\n             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n            \\*/\n            this.ca = this.customAttributes = {};\n        },\n        paperproto,\n        appendChild = \"appendChild\",\n        apply = \"apply\",\n        concat = \"concat\",\n        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n        E = \"\",\n        S = \" \",\n        Str = String,\n        split = \"split\",\n        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n        touchMap = {\n            mousedown: \"touchstart\",\n            mousemove: \"touchmove\",\n            mouseup: \"touchend\"\n        },\n        lowerCase = Str.prototype.toLowerCase,\n        math = Math,\n        mmax = math.max,\n        mmin = math.min,\n        abs = math.abs,\n        pow = math.pow,\n        PI = math.PI,\n        nu = \"number\",\n        string = \"string\",\n        array = \"array\",\n        toString = \"toString\",\n        fillString = \"fill\",\n        objectToString = Object.prototype.toString,\n        paper = {},\n        push = \"push\",\n        ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},\n        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n        round = math.round,\n        setAttribute = \"setAttribute\",\n        toFloat = parseFloat,\n        toInt = parseInt,\n        upperCase = Str.prototype.toUpperCase,\n        availableAttrs = R._availableAttrs = {\n            \"arrow-end\": \"none\",\n            \"arrow-start\": \"none\",\n            blur: 0,\n            \"clip-rect\": \"0 0 1e9 1e9\",\n            cursor: \"default\",\n            cx: 0,\n            cy: 0,\n            fill: \"#fff\",\n            \"fill-opacity\": 1,\n            font: '10px \"Arial\"',\n            \"font-family\": '\"Arial\"',\n            \"font-size\": \"10\",\n            \"font-style\": \"normal\",\n            \"font-weight\": 400,\n            gradient: 0,\n            height: 0,\n            href: \"http://raphaeljs.com/\",\n            \"letter-spacing\": 0,\n            opacity: 1,\n            path: \"M0,0\",\n            r: 0,\n            rx: 0,\n            ry: 0,\n            src: \"\",\n            stroke: \"#000\",\n            \"stroke-dasharray\": \"\",\n            \"stroke-linecap\": \"butt\",\n            \"stroke-linejoin\": \"butt\",\n            \"stroke-miterlimit\": 0,\n            \"stroke-opacity\": 1,\n            \"stroke-width\": 1,\n            target: \"_blank\",\n            \"text-anchor\": \"middle\",\n            title: \"Raphael\",\n            transform: \"\",\n            width: 0,\n            x: 0,\n            y: 0\n        },\n        availableAnimAttrs = R._availableAnimAttrs = {\n            blur: nu,\n            \"clip-rect\": \"csv\",\n            cx: nu,\n            cy: nu,\n            fill: \"colour\",\n            \"fill-opacity\": nu,\n            \"font-size\": nu,\n            height: nu,\n            opacity: nu,\n            path: \"path\",\n            r: nu,\n            rx: nu,\n            ry: nu,\n            stroke: \"colour\",\n            \"stroke-opacity\": nu,\n            \"stroke-width\": nu,\n            transform: \"transform\",\n            width: nu,\n            x: nu,\n            y: nu\n        },\n        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n        hsrg = {hs: 1, rg: 1},\n        p2s = /,?([achlmqrstvxz]),?/gi,\n        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n        eldata = {},\n        sortByKey = function (a, b) {\n            return a.key - b.key;\n        },\n        sortByNumber = function (a, b) {\n            return toFloat(a) - toFloat(b);\n        },\n        fun = function () {},\n        pipe = function (x) {\n            return x;\n        },\n        rectPath = R._rectPath = function (x, y, w, h, r) {\n            if (r) {\n                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n            }\n            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        },\n        ellipsePath = function (x, y, rx, ry) {\n            if (ry == null) {\n                ry = rx;\n            }\n            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n        },\n        getPath = R._getPath = {\n            path: function (el) {\n                return el.attr(\"path\");\n            },\n            circle: function (el) {\n                var a = el.attrs;\n                return ellipsePath(a.cx, a.cy, a.r);\n            },\n            ellipse: function (el) {\n                var a = el.attrs;\n                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n            },\n            rect: function (el) {\n                var a = el.attrs;\n                return rectPath(a.x, a.y, a.width, a.height, a.r);\n            },\n            image: function (el) {\n                var a = el.attrs;\n                return rectPath(a.x, a.y, a.width, a.height);\n            },\n            text: function (el) {\n                var bbox = el._getBBox();\n                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n            },\n            set : function(el) {\n                var bbox = el._getBBox();\n                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n            }\n        },\n        /*\\\n         * Raphael.mapPath\n         [ method ]\n         **\n         * Transform the path string with given matrix.\n         > Parameters\n         - path (string) path string\n         - matrix (object) see @Matrix\n         = (string) transformed path string\n        \\*/\n        mapPath = R.mapPath = function (path, matrix) {\n            if (!matrix) {\n                return path;\n            }\n            var x, y, i, j, ii, jj, pathi;\n            path = path2curve(path);\n            for (i = 0, ii = path.length; i < ii; i++) {\n                pathi = path[i];\n                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                    x = matrix.x(pathi[j], pathi[j + 1]);\n                    y = matrix.y(pathi[j], pathi[j + 1]);\n                    pathi[j] = x;\n                    pathi[j + 1] = y;\n                }\n            }\n            return path;\n        };\n\n    R._g = g;\n    /*\\\n     * Raphael.type\n     [ property (string) ]\n     **\n     * Can be “SVG”, “VML” or empty, depending on browser support.\n    \\*/\n    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n    if (R.type == \"VML\") {\n        var d = g.doc.createElement(\"div\"),\n            b;\n        d.innerHTML = '<v:shape adj=\"1\"/>';\n        b = d.firstChild;\n        b.style.behavior = \"url(#default#VML)\";\n        if (!(b && typeof b.adj == \"object\")) {\n            return (R.type = E);\n        }\n        d = null;\n    }\n    /*\\\n     * Raphael.svg\n     [ property (boolean) ]\n     **\n     * `true` if browser supports SVG.\n    \\*/\n    /*\\\n     * Raphael.vml\n     [ property (boolean) ]\n     **\n     * `true` if browser supports VML.\n    \\*/\n    R.svg = !(R.vml = R.type == \"VML\");\n    R._Paper = Paper;\n    /*\\\n     * Raphael.fn\n     [ property (object) ]\n     **\n     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n     * ensure any namespacing ensures proper context.\n     > Usage\n     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n     |     return this.path( ... );\n     | };\n     | // or create namespace\n     | Raphael.fn.mystuff = {\n     |     arrow: function () {…},\n     |     star: function () {…},\n     |     // etc…\n     | };\n     | var paper = Raphael(10, 10, 630, 480);\n     | // then use it\n     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n     | paper.mystuff.arrow();\n     | paper.mystuff.star();\n    \\*/\n    R.fn = paperproto = Paper.prototype = R.prototype;\n    R._id = 0;\n    R._oid = 0;\n    /*\\\n     * Raphael.is\n     [ method ]\n     **\n     * Handful of replacements for `typeof` operator.\n     > Parameters\n     - o (…) any object or primitive\n     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n     = (boolean) is given value is of given type\n    \\*/\n    R.is = function (o, type) {\n        type = lowerCase.call(type);\n        if (type == \"finite\") {\n            return !isnan[has](+o);\n        }\n        if (type == \"array\") {\n            return o instanceof Array;\n        }\n        return  (type == \"null\" && o === null) ||\n                (type == typeof o && o !== null) ||\n                (type == \"object\" && o === Object(o)) ||\n                (type == \"array\" && Array.isArray && Array.isArray(o)) ||\n                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n    };\n\n    function clone(obj) {\n        if (typeof obj == \"function\" || Object(obj) !== obj) {\n            return obj;\n        }\n        var res = new obj.constructor;\n        for (var key in obj) if (obj[has](key)) {\n            res[key] = clone(obj[key]);\n        }\n        return res;\n    }\n\n    /*\\\n     * Raphael.angle\n     [ method ]\n     **\n     * Returns angle between two or three points\n     > Parameters\n     - x1 (number) x coord of first point\n     - y1 (number) y coord of first point\n     - x2 (number) x coord of second point\n     - y2 (number) y coord of second point\n     - x3 (number) #optional x coord of third point\n     - y3 (number) #optional y coord of third point\n     = (number) angle in degrees.\n    \\*/\n    R.angle = function (x1, y1, x2, y2, x3, y3) {\n        if (x3 == null) {\n            var x = x1 - x2,\n                y = y1 - y2;\n            if (!x && !y) {\n                return 0;\n            }\n            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n        } else {\n            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n        }\n    };\n    /*\\\n     * Raphael.rad\n     [ method ]\n     **\n     * Transform angle to radians\n     > Parameters\n     - deg (number) angle in degrees\n     = (number) angle in radians.\n    \\*/\n    R.rad = function (deg) {\n        return deg % 360 * PI / 180;\n    };\n    /*\\\n     * Raphael.deg\n     [ method ]\n     **\n     * Transform angle to degrees\n     > Parameters\n     - rad (number) angle in radians\n     = (number) angle in degrees.\n    \\*/\n    R.deg = function (rad) {\n        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n    };\n    /*\\\n     * Raphael.snapTo\n     [ method ]\n     **\n     * Snaps given value to given grid.\n     > Parameters\n     - values (array|number) given array of values or step of the grid\n     - value (number) value to adjust\n     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n     = (number) adjusted value.\n    \\*/\n    R.snapTo = function (values, value, tolerance) {\n        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n        if (R.is(values, array)) {\n            var i = values.length;\n            while (i--) if (abs(values[i] - value) <= tolerance) {\n                return values[i];\n            }\n        } else {\n            values = +values;\n            var rem = value % values;\n            if (rem < tolerance) {\n                return value - rem;\n            }\n            if (rem > values - tolerance) {\n                return value - rem + values;\n            }\n        }\n        return value;\n    };\n\n    /*\\\n     * Raphael.createUUID\n     [ method ]\n     **\n     * Returns RFC4122, version 4 ID\n    \\*/\n    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n        return function () {\n            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n        };\n    })(/[xy]/g, function (c) {\n        var r = math.random() * 16 | 0,\n            v = c == \"x\" ? r : (r & 3 | 8);\n        return v.toString(16);\n    });\n\n    /*\\\n     * Raphael.setWindow\n     [ method ]\n     **\n     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n     > Parameters\n     - newwin (window) new window object\n    \\*/\n    R.setWindow = function (newwin) {\n        eve(\"raphael.setWindow\", R, g.win, newwin);\n        g.win = newwin;\n        g.doc = g.win.document;\n        if (R._engine.initWin) {\n            R._engine.initWin(g.win);\n        }\n    };\n    var toHex = function (color) {\n        if (R.vml) {\n            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n            var trim = /^\\s+|\\s+$/g;\n            var bod;\n            try {\n                var docum = new ActiveXObject(\"htmlfile\");\n                docum.write(\"<body>\");\n                docum.close();\n                bod = docum.body;\n            } catch(e) {\n                bod = createPopup().document.body;\n            }\n            var range = bod.createTextRange();\n            toHex = cacher(function (color) {\n                try {\n                    bod.style.color = Str(color).replace(trim, E);\n                    var value = range.queryCommandValue(\"ForeColor\");\n                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n                } catch(e) {\n                    return \"none\";\n                }\n            });\n        } else {\n            var i = g.doc.createElement(\"i\");\n            i.title = \"Rapha\\xebl Colour Picker\";\n            i.style.display = \"none\";\n            g.doc.body.appendChild(i);\n            toHex = cacher(function (color) {\n                i.style.color = color;\n                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n            });\n        }\n        return toHex(color);\n    },\n    hsbtoString = function () {\n        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n    },\n    hsltoString = function () {\n        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n    },\n    rgbtoString = function () {\n        return this.hex;\n    },\n    prepareRGB = function (r, g, b) {\n        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n            b = r.b;\n            g = r.g;\n            r = r.r;\n        }\n        if (g == null && R.is(r, string)) {\n            var clr = R.getRGB(r);\n            r = clr.r;\n            g = clr.g;\n            b = clr.b;\n        }\n        if (r > 1 || g > 1 || b > 1) {\n            r /= 255;\n            g /= 255;\n            b /= 255;\n        }\n\n        return [r, g, b];\n    },\n    packageRGB = function (r, g, b, o) {\n        r *= 255;\n        g *= 255;\n        b *= 255;\n        var rgb = {\n            r: r,\n            g: g,\n            b: b,\n            hex: R.rgb(r, g, b),\n            toString: rgbtoString\n        };\n        R.is(o, \"finite\") && (rgb.opacity = o);\n        return rgb;\n    };\n\n    /*\\\n     * Raphael.color\n     [ method ]\n     **\n     * Parses the color string and returns object with all values for the given color.\n     > Parameters\n     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n     = (object) Combined RGB & HSB object in format:\n     o {\n     o     r (number) red,\n     o     g (number) green,\n     o     b (number) blue,\n     o     hex (string) color in HTML/CSS format: #••••••,\n     o     error (boolean) `true` if string can’t be parsed,\n     o     h (number) hue,\n     o     s (number) saturation,\n     o     v (number) value (brightness),\n     o     l (number) lightness\n     o }\n    \\*/\n    R.color = function (clr) {\n        var rgb;\n        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n            rgb = R.hsb2rgb(clr);\n            clr.r = rgb.r;\n            clr.g = rgb.g;\n            clr.b = rgb.b;\n            clr.hex = rgb.hex;\n        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n            rgb = R.hsl2rgb(clr);\n            clr.r = rgb.r;\n            clr.g = rgb.g;\n            clr.b = rgb.b;\n            clr.hex = rgb.hex;\n        } else {\n            if (R.is(clr, \"string\")) {\n                clr = R.getRGB(clr);\n            }\n            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n                rgb = R.rgb2hsl(clr);\n                clr.h = rgb.h;\n                clr.s = rgb.s;\n                clr.l = rgb.l;\n                rgb = R.rgb2hsb(clr);\n                clr.v = rgb.b;\n            } else {\n                clr = {hex: \"none\"};\n                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            }\n        }\n        clr.toString = rgbtoString;\n        return clr;\n    };\n    /*\\\n     * Raphael.hsb2rgb\n     [ method ]\n     **\n     * Converts HSB values to RGB object.\n     > Parameters\n     - h (number) hue\n     - s (number) saturation\n     - v (number) value or brightness\n     = (object) RGB object in format:\n     o {\n     o     r (number) red,\n     o     g (number) green,\n     o     b (number) blue,\n     o     hex (string) color in HTML/CSS format: #••••••\n     o }\n    \\*/\n    R.hsb2rgb = function (h, s, v, o) {\n        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n            v = h.b;\n            s = h.s;\n            o = h.o;\n            h = h.h;\n        }\n        h *= 360;\n        var R, G, B, X, C;\n        h = (h % 360) / 60;\n        C = v * s;\n        X = C * (1 - abs(h % 2 - 1));\n        R = G = B = v - C;\n\n        h = ~~h;\n        R += [C, X, 0, 0, X, C][h];\n        G += [X, C, C, X, 0, 0][h];\n        B += [0, 0, X, C, C, X][h];\n        return packageRGB(R, G, B, o);\n    };\n    /*\\\n     * Raphael.hsl2rgb\n     [ method ]\n     **\n     * Converts HSL values to RGB object.\n     > Parameters\n     - h (number) hue\n     - s (number) saturation\n     - l (number) luminosity\n     = (object) RGB object in format:\n     o {\n     o     r (number) red,\n     o     g (number) green,\n     o     b (number) blue,\n     o     hex (string) color in HTML/CSS format: #••••••\n     o }\n    \\*/\n    R.hsl2rgb = function (h, s, l, o) {\n        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n            l = h.l;\n            s = h.s;\n            h = h.h;\n        }\n        if (h > 1 || s > 1 || l > 1) {\n            h /= 360;\n            s /= 100;\n            l /= 100;\n        }\n        h *= 360;\n        var R, G, B, X, C;\n        h = (h % 360) / 60;\n        C = 2 * s * (l < .5 ? l : 1 - l);\n        X = C * (1 - abs(h % 2 - 1));\n        R = G = B = l - C / 2;\n\n        h = ~~h;\n        R += [C, X, 0, 0, X, C][h];\n        G += [X, C, C, X, 0, 0][h];\n        B += [0, 0, X, C, C, X][h];\n        return packageRGB(R, G, B, o);\n    };\n    /*\\\n     * Raphael.rgb2hsb\n     [ method ]\n     **\n     * Converts RGB values to HSB object.\n     > Parameters\n     - r (number) red\n     - g (number) green\n     - b (number) blue\n     = (object) HSB object in format:\n     o {\n     o     h (number) hue\n     o     s (number) saturation\n     o     b (number) brightness\n     o }\n    \\*/\n    R.rgb2hsb = function (r, g, b) {\n        b = prepareRGB(r, g, b);\n        r = b[0];\n        g = b[1];\n        b = b[2];\n\n        var H, S, V, C;\n        V = mmax(r, g, b);\n        C = V - mmin(r, g, b);\n        H = (C == 0 ? null :\n             V == r ? (g - b) / C :\n             V == g ? (b - r) / C + 2 :\n                      (r - g) / C + 4\n            );\n        H = ((H + 360) % 6) * 60 / 360;\n        S = C == 0 ? 0 : C / V;\n        return {h: H, s: S, b: V, toString: hsbtoString};\n    };\n    /*\\\n     * Raphael.rgb2hsl\n     [ method ]\n     **\n     * Converts RGB values to HSL object.\n     > Parameters\n     - r (number) red\n     - g (number) green\n     - b (number) blue\n     = (object) HSL object in format:\n     o {\n     o     h (number) hue\n     o     s (number) saturation\n     o     l (number) luminosity\n     o }\n    \\*/\n    R.rgb2hsl = function (r, g, b) {\n        b = prepareRGB(r, g, b);\n        r = b[0];\n        g = b[1];\n        b = b[2];\n\n        var H, S, L, M, m, C;\n        M = mmax(r, g, b);\n        m = mmin(r, g, b);\n        C = M - m;\n        H = (C == 0 ? null :\n             M == r ? (g - b) / C :\n             M == g ? (b - r) / C + 2 :\n                      (r - g) / C + 4);\n        H = ((H + 360) % 6) * 60 / 360;\n        L = (M + m) / 2;\n        S = (C == 0 ? 0 :\n             L < .5 ? C / (2 * L) :\n                      C / (2 - 2 * L));\n        return {h: H, s: S, l: L, toString: hsltoString};\n    };\n    R._path2string = function () {\n        return this.join(\",\").replace(p2s, \"$1\");\n    };\n    function repush(array, item) {\n        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n            return array.push(array.splice(i, 1)[0]);\n        }\n    }\n    function cacher(f, scope, postprocessor) {\n        function newf() {\n            var arg = Array.prototype.slice.call(arguments, 0),\n                args = arg.join(\"\\u2400\"),\n                cache = newf.cache = newf.cache || {},\n                count = newf.count = newf.count || [];\n            if (cache[has](args)) {\n                repush(count, args);\n                return postprocessor ? postprocessor(cache[args]) : cache[args];\n            }\n            count.length >= 1e3 && delete cache[count.shift()];\n            count.push(args);\n            cache[args] = f[apply](scope, arg);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        return newf;\n    }\n\n    var preload = R._preload = function (src, f) {\n        var img = g.doc.createElement(\"img\");\n        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n        img.onload = function () {\n            f.call(this);\n            this.onload = null;\n            g.doc.body.removeChild(this);\n        };\n        img.onerror = function () {\n            g.doc.body.removeChild(this);\n        };\n        g.doc.body.appendChild(img);\n        img.src = src;\n    };\n\n    function clrToString() {\n        return this.hex;\n    }\n\n    /*\\\n     * Raphael.getRGB\n     [ method ]\n     **\n     * Parses colour string as RGB object\n     > Parameters\n     - colour (string) colour string in one of formats:\n     # <ul>\n     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n     # </ul>\n     = (object) RGB object in format:\n     o {\n     o     r (number) red,\n     o     g (number) green,\n     o     b (number) blue\n     o     hex (string) color in HTML/CSS format: #••••••,\n     o     error (boolean) true if string can’t be parsed\n     o }\n    \\*/\n    R.getRGB = cacher(function (colour) {\n        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n        }\n        if (colour == \"none\") {\n            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};\n        }\n        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n        var res,\n            red,\n            green,\n            blue,\n            opacity,\n            t,\n            values,\n            rgb = colour.match(colourRegExp);\n        if (rgb) {\n            if (rgb[2]) {\n                blue = toInt(rgb[2].substring(5), 16);\n                green = toInt(rgb[2].substring(3, 5), 16);\n                red = toInt(rgb[2].substring(1, 3), 16);\n            }\n            if (rgb[3]) {\n                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n            }\n            if (rgb[4]) {\n                values = rgb[4][split](commaSpaces);\n                red = toFloat(values[0]);\n                values[0].slice(-1) == \"%\" && (red *= 2.55);\n                green = toFloat(values[1]);\n                values[1].slice(-1) == \"%\" && (green *= 2.55);\n                blue = toFloat(values[2]);\n                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            }\n            if (rgb[5]) {\n                values = rgb[5][split](commaSpaces);\n                red = toFloat(values[0]);\n                values[0].slice(-1) == \"%\" && (red *= 2.55);\n                green = toFloat(values[1]);\n                values[1].slice(-1) == \"%\" && (green *= 2.55);\n                blue = toFloat(values[2]);\n                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n                return R.hsb2rgb(red, green, blue, opacity);\n            }\n            if (rgb[6]) {\n                values = rgb[6][split](commaSpaces);\n                red = toFloat(values[0]);\n                values[0].slice(-1) == \"%\" && (red *= 2.55);\n                green = toFloat(values[1]);\n                values[1].slice(-1) == \"%\" && (green *= 2.55);\n                blue = toFloat(values[2]);\n                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n                return R.hsl2rgb(red, green, blue, opacity);\n            }\n            rgb = {r: red, g: green, b: blue, toString: clrToString};\n            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n            R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n            return rgb;\n        }\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n    }, R);\n    /*\\\n     * Raphael.hsb\n     [ method ]\n     **\n     * Converts HSB values to hex representation of the colour.\n     > Parameters\n     - h (number) hue\n     - s (number) saturation\n     - b (number) value or brightness\n     = (string) hex representation of the colour.\n    \\*/\n    R.hsb = cacher(function (h, s, b) {\n        return R.hsb2rgb(h, s, b).hex;\n    });\n    /*\\\n     * Raphael.hsl\n     [ method ]\n     **\n     * Converts HSL values to hex representation of the colour.\n     > Parameters\n     - h (number) hue\n     - s (number) saturation\n     - l (number) luminosity\n     = (string) hex representation of the colour.\n    \\*/\n    R.hsl = cacher(function (h, s, l) {\n        return R.hsl2rgb(h, s, l).hex;\n    });\n    /*\\\n     * Raphael.rgb\n     [ method ]\n     **\n     * Converts RGB values to hex representation of the colour.\n     > Parameters\n     - r (number) red\n     - g (number) green\n     - b (number) blue\n     = (string) hex representation of the colour.\n    \\*/\n    R.rgb = cacher(function (r, g, b) {\n        return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n    });\n    /*\\\n     * Raphael.getColor\n     [ method ]\n     **\n     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n     > Parameters\n     - value (number) #optional brightness, default is `0.75`\n     = (string) hex representation of the colour.\n    \\*/\n    R.getColor = function (value) {\n        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n            rgb = this.hsb2rgb(start.h, start.s, start.b);\n        start.h += .075;\n        if (start.h > 1) {\n            start.h = 0;\n            start.s -= .2;\n            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n        }\n        return rgb.hex;\n    };\n    /*\\\n     * Raphael.getColor.reset\n     [ method ]\n     **\n     * Resets spectrum position for @Raphael.getColor back to red.\n    \\*/\n    R.getColor.reset = function () {\n        delete this.start;\n    };\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n    /*\\\n     * Raphael.parsePathString\n     [ method ]\n     **\n     * Utility method\n     **\n     * Parses given path string into an array of arrays of path segments.\n     > Parameters\n     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n     = (array) array of segments.\n    \\*/\n    R.parsePathString = function (pathString) {\n        if (!pathString) {\n            return null;\n        }\n        var pth = paths(pathString);\n        if (pth.arr) {\n            return pathClone(pth.arr);\n        }\n\n        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n            data = [];\n        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n            data = pathClone(pathString);\n        }\n        if (!data.length) {\n            Str(pathString).replace(pathCommand, function (a, b, c) {\n                var params = [],\n                    name = b.toLowerCase();\n                c.replace(pathValues, function (a, b) {\n                    b && params.push(+b);\n                });\n                if (name == \"m\" && params.length > 2) {\n                    data.push([b][concat](params.splice(0, 2)));\n                    name = \"l\";\n                    b = b == \"m\" ? \"l\" : \"L\";\n                }\n                if (name == \"r\") {\n                    data.push([b][concat](params));\n                } else while (params.length >= paramCounts[name]) {\n                    data.push([b][concat](params.splice(0, paramCounts[name])));\n                    if (!paramCounts[name]) {\n                        break;\n                    }\n                }\n            });\n        }\n        data.toString = R._path2string;\n        pth.arr = pathClone(data);\n        return data;\n    };\n    /*\\\n     * Raphael.parseTransformString\n     [ method ]\n     **\n     * Utility method\n     **\n     * Parses given path string into an array of transformations.\n     > Parameters\n     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n     = (array) array of transformations.\n    \\*/\n    R.parseTransformString = cacher(function (TString) {\n        if (!TString) {\n            return null;\n        }\n        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n            data = [];\n        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n            data = pathClone(TString);\n        }\n        if (!data.length) {\n            Str(TString).replace(tCommand, function (a, b, c) {\n                var params = [],\n                    name = lowerCase.call(b);\n                c.replace(pathValues, function (a, b) {\n                    b && params.push(+b);\n                });\n                data.push([b][concat](params));\n            });\n        }\n        data.toString = R._path2string;\n        return data;\n    });\n    // PATHS\n    var paths = function (ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    };\n    /*\\\n     * Raphael.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Find dot coordinates on the given cubic bezier curve at the given t.\n     > Parameters\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point\n     o     y: (number) y coordinate of the point\n     o     m: {\n     o         x: (number) x coordinate of the left anchor\n     o         y: (number) y coordinate of the left anchor\n     o     }\n     o     n: {\n     o         x: (number) x coordinate of the right anchor\n     o         y: (number) y coordinate of the right anchor\n     o     }\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve\n     o         y: (number) y coordinate of the start of the curve\n     o     }\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve\n     o         y: (number) y coordinate of the end of the curve\n     o     }\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n        (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    };\n    /*\\\n     * Raphael.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Return bounding box of a given cubic bezier curve\n     > Parameters\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for bezier curve\n     = (object) point information in format:\n     o {\n     o     min: {\n     o         x: (number) x coordinate of the left point\n     o         y: (number) y coordinate of the top point\n     o     }\n     o     max: {\n     o         x: (number) x coordinate of the right point\n     o         y: (number) y coordinate of the bottom point\n     o     }\n     o }\n    \\*/\n    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!R.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return {\n            x: bbox.min.x,\n            y: bbox.min.y,\n            x2: bbox.max.x,\n            y2: bbox.max.y,\n            width: bbox.max.x - bbox.min.x,\n            height: bbox.max.y - bbox.min.y\n        };\n    };\n    /*\\\n     * Raphael.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding boxes.\n     > Parameters\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point inside\n    \\*/\n    R.isPointInsideBBox = function (bbox, x, y) {\n        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n    };\n    /*\\\n     * Raphael.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     > Parameters\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if they intersect\n    \\*/\n    R.isBBoxIntersect = function (bbox1, bbox2) {\n        var i = R.isPointInsideBBox;\n        return i(bbox2, bbox1.x, bbox1.y)\n            || i(bbox2, bbox1.x2, bbox1.y)\n            || i(bbox2, bbox1.x, bbox1.y2)\n            || i(bbox2, bbox1.x2, bbox1.y2)\n            || i(bbox1, bbox2.x, bbox2.y)\n            || i(bbox1, bbox2.x2, bbox2.y)\n            || i(bbox1, bbox2.x, bbox2.y2)\n            || i(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    };\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = R.bezierBBox(bez1),\n            bbox2 = R.bezierBBox(bez2);\n        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = mmax(~~(l1 / 5), 1),\n            n2 = mmax(~~(l2 / 5), 1),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: mmin(t1, 1),\n                                t2: mmin(t2, 1)\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    /*\\\n     * Raphael.pathIntersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     > Parameters\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point\n     o         y: (number) y coordinate of the point\n     o         t1: (number) t value for segment of path1\n     o         t2: (number) t value for segment of path2\n     o         segment1: (number) order number for segment of path1\n     o         segment2: (number) order number for segment of path2\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    R.pathIntersection = function (path1, path2) {\n        return interPathHelper(path1, path2);\n    };\n    R.pathIntersectionNumber = function (path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    };\n    function interPathHelper(path1, path2, justCount) {\n        path1 = R._path2curve(path1);\n        path2 = R._path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    /*\\\n     * Raphael.isPointInsidePath\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     > Parameters\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) true, if point is inside the path\n    \\*/\n    R.isPointInsidePath = function (path, x, y) {\n        var bbox = R.pathBBox(path);\n        return R.isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    };\n    R._removedFactory = function (methodname) {\n        return function () {\n            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n        };\n    };\n    /*\\\n     * Raphael.pathBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Return bounding box of a given path\n     > Parameters\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box\n     o     y: (number) y coordinate of the left top point of the box\n     o     x2: (number) x coordinate of the right bottom point of the box\n     o     y2: (number) y coordinate of the right bottom point of the box\n     o     width: (number) width of the box\n     o     height: (number) height of the box\n     o     cx: (number) x coordinate of the center of the box\n     o     cy: (number) y coordinate of the center of the box\n     o }\n    \\*/\n    var pathDimensions = R.pathBBox = function (path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X[concat](dim.min.x, dim.max.x);\n                Y = Y[concat](dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin[apply](0, X),\n            ymin = mmin[apply](0, Y),\n            xmax = mmax[apply](0, X),\n            ymax = mmax[apply](0, Y),\n            width = xmax - xmin,\n            height = ymax - ymin,\n                bb = {\n                x: xmin,\n                y: ymin,\n                x2: xmax,\n                y2: ymax,\n                width: width,\n                height: height,\n                cx: xmin + width / 2,\n                cy: ymin + height / 2\n            };\n        pth.bbox = clone(bb);\n        return bb;\n    },\n        pathClone = function (pathArray) {\n            var res = clone(pathArray);\n            res.toString = R._path2string;\n            return res;\n        },\n        pathToRelative = R._pathToRelative = function (pathArray) {\n            var pth = paths(pathArray);\n            if (pth.rel) {\n                return pathClone(pth.rel);\n            }\n            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n                pathArray = R.parsePathString(pathArray);\n            }\n            var res = [],\n                x = 0,\n                y = 0,\n                mx = 0,\n                my = 0,\n                start = 0;\n            if (pathArray[0][0] == \"M\") {\n                x = pathArray[0][1];\n                y = pathArray[0][2];\n                mx = x;\n                my = y;\n                start++;\n                res.push([\"M\", x, y]);\n            }\n            for (var i = start, ii = pathArray.length; i < ii; i++) {\n                var r = res[i] = [],\n                    pa = pathArray[i];\n                if (pa[0] != lowerCase.call(pa[0])) {\n                    r[0] = lowerCase.call(pa[0]);\n                    switch (r[0]) {\n                        case \"a\":\n                            r[1] = pa[1];\n                            r[2] = pa[2];\n                            r[3] = pa[3];\n                            r[4] = pa[4];\n                            r[5] = pa[5];\n                            r[6] = +(pa[6] - x).toFixed(3);\n                            r[7] = +(pa[7] - y).toFixed(3);\n                            break;\n                        case \"v\":\n                            r[1] = +(pa[1] - y).toFixed(3);\n                            break;\n                        case \"m\":\n                            mx = pa[1];\n                            my = pa[2];\n                        default:\n                            for (var j = 1, jj = pa.length; j < jj; j++) {\n                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n                            }\n                    }\n                } else {\n                    r = res[i] = [];\n                    if (pa[0] == \"m\") {\n                        mx = pa[1] + x;\n                        my = pa[2] + y;\n                    }\n                    for (var k = 0, kk = pa.length; k < kk; k++) {\n                        res[i][k] = pa[k];\n                    }\n                }\n                var len = res[i].length;\n                switch (res[i][0]) {\n                    case \"z\":\n                        x = mx;\n                        y = my;\n                        break;\n                    case \"h\":\n                        x += +res[i][len - 1];\n                        break;\n                    case \"v\":\n                        y += +res[i][len - 1];\n                        break;\n                    default:\n                        x += +res[i][len - 2];\n                        y += +res[i][len - 1];\n                }\n            }\n            res.toString = R._path2string;\n            pth.rel = pathClone(res);\n            return res;\n        },\n        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n            var pth = paths(pathArray);\n            if (pth.abs) {\n                return pathClone(pth.abs);\n            }\n            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n                pathArray = R.parsePathString(pathArray);\n            }\n            if (!pathArray || !pathArray.length) {\n                return [[\"M\", 0, 0]];\n            }\n            var res = [],\n                x = 0,\n                y = 0,\n                mx = 0,\n                my = 0,\n                start = 0;\n            if (pathArray[0][0] == \"M\") {\n                x = +pathArray[0][1];\n                y = +pathArray[0][2];\n                mx = x;\n                my = y;\n                start++;\n                res[0] = [\"M\", x, y];\n            }\n            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n                res.push(r = []);\n                pa = pathArray[i];\n                if (pa[0] != upperCase.call(pa[0])) {\n                    r[0] = upperCase.call(pa[0]);\n                    switch (r[0]) {\n                        case \"A\":\n                            r[1] = pa[1];\n                            r[2] = pa[2];\n                            r[3] = pa[3];\n                            r[4] = pa[4];\n                            r[5] = pa[5];\n                            r[6] = +(pa[6] + x);\n                            r[7] = +(pa[7] + y);\n                            break;\n                        case \"V\":\n                            r[1] = +pa[1] + y;\n                            break;\n                        case \"H\":\n                            r[1] = +pa[1] + x;\n                            break;\n                        case \"R\":\n                            var dots = [x, y][concat](pa.slice(1));\n                            for (var j = 2, jj = dots.length; j < jj; j++) {\n                                dots[j] = +dots[j] + x;\n                                dots[++j] = +dots[j] + y;\n                            }\n                            res.pop();\n                            res = res[concat](catmullRom2bezier(dots, crz));\n                            break;\n                        case \"M\":\n                            mx = +pa[1] + x;\n                            my = +pa[2] + y;\n                        default:\n                            for (j = 1, jj = pa.length; j < jj; j++) {\n                                r[j] = +pa[j] + ((j % 2) ? x : y);\n                            }\n                    }\n                } else if (pa[0] == \"R\") {\n                    dots = [x, y][concat](pa.slice(1));\n                    res.pop();\n                    res = res[concat](catmullRom2bezier(dots, crz));\n                    r = [\"R\"][concat](pa.slice(-2));\n                } else {\n                    for (var k = 0, kk = pa.length; k < kk; k++) {\n                        r[k] = pa[k];\n                    }\n                }\n                switch (r[0]) {\n                    case \"Z\":\n                        x = mx;\n                        y = my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n            res.toString = R._path2string;\n            pth.abs = pathClone(res);\n            return res;\n        },\n        l2c = function (x1, y1, x2, y2) {\n            return [x1, y1, x2, y2, x2, y2];\n        },\n        q2c = function (x1, y1, ax, ay, x2, y2) {\n            var _13 = 1 / 3,\n                _23 = 2 / 3;\n            return [\n                    _13 * x1 + _23 * ax,\n                    _13 * y1 + _23 * ay,\n                    _13 * x2 + _23 * ax,\n                    _13 * y2 + _23 * ay,\n                    x2,\n                    y2\n                ];\n        },\n        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n            // for more information of where this math came from visit:\n            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n            var _120 = PI * 120 / 180,\n                rad = PI / 180 * (+angle || 0),\n                res = [],\n                xy,\n                rotate = cacher(function (x, y, rad) {\n                    var X = x * math.cos(rad) - y * math.sin(rad),\n                        Y = x * math.sin(rad) + y * math.cos(rad);\n                    return {x: X, y: Y};\n                });\n            if (!recursive) {\n                xy = rotate(x1, y1, -rad);\n                x1 = xy.x;\n                y1 = xy.y;\n                xy = rotate(x2, y2, -rad);\n                x2 = xy.x;\n                y2 = xy.y;\n                var cos = math.cos(PI / 180 * angle),\n                    sin = math.sin(PI / 180 * angle),\n                    x = (x1 - x2) / 2,\n                    y = (y1 - y2) / 2;\n                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n                if (h > 1) {\n                    h = math.sqrt(h);\n                    rx = h * rx;\n                    ry = h * ry;\n                }\n                var rx2 = rx * rx,\n                    ry2 = ry * ry,\n                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                    cx = k * rx * y / ry + (x1 + x2) / 2,\n                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n                f1 = x1 < cx ? PI - f1 : f1;\n                f2 = x2 < cx ? PI - f2 : f2;\n                f1 < 0 && (f1 = PI * 2 + f1);\n                f2 < 0 && (f2 = PI * 2 + f2);\n                if (sweep_flag && f1 > f2) {\n                    f1 = f1 - PI * 2;\n                }\n                if (!sweep_flag && f2 > f1) {\n                    f2 = f2 - PI * 2;\n                }\n            } else {\n                f1 = recursive[0];\n                f2 = recursive[1];\n                cx = recursive[2];\n                cy = recursive[3];\n            }\n            var df = f2 - f1;\n            if (abs(df) > _120) {\n                var f2old = f2,\n                    x2old = x2,\n                    y2old = y2;\n                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n                x2 = cx + rx * math.cos(f2);\n                y2 = cy + ry * math.sin(f2);\n                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n            }\n            df = f2 - f1;\n            var c1 = math.cos(f1),\n                s1 = math.sin(f1),\n                c2 = math.cos(f2),\n                s2 = math.sin(f2),\n                t = math.tan(df / 4),\n                hx = 4 / 3 * rx * t,\n                hy = 4 / 3 * ry * t,\n                m1 = [x1, y1],\n                m2 = [x1 + hx * s1, y1 - hy * c1],\n                m3 = [x2 + hx * s2, y2 - hy * c2],\n                m4 = [x2, y2];\n            m2[0] = 2 * m1[0] - m2[0];\n            m2[1] = 2 * m1[1] - m2[1];\n            if (recursive) {\n                return [m2, m3, m4][concat](res);\n            } else {\n                res = [m2, m3, m4][concat](res).join()[split](\",\");\n                var newres = [];\n                for (var i = 0, ii = res.length; i < ii; i++) {\n                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n                }\n                return newres;\n            }\n        },\n        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n            var t1 = 1 - t;\n            return {\n                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n            };\n        },\n        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n                c = p1x - c1x,\n                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n                y = [p1y, p2y],\n                x = [p1x, p2x],\n                dot;\n            abs(t1) > \"1e12\" && (t1 = .5);\n            abs(t2) > \"1e12\" && (t2 = .5);\n            if (t1 > 0 && t1 < 1) {\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n                x.push(dot.x);\n                y.push(dot.y);\n            }\n            if (t2 > 0 && t2 < 1) {\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n                x.push(dot.x);\n                y.push(dot.y);\n            }\n            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n            c = p1y - c1y;\n            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n            abs(t1) > \"1e12\" && (t1 = .5);\n            abs(t2) > \"1e12\" && (t2 = .5);\n            if (t1 > 0 && t1 < 1) {\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n                x.push(dot.x);\n                y.push(dot.y);\n            }\n            if (t2 > 0 && t2 < 1) {\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n                x.push(dot.x);\n                y.push(dot.y);\n            }\n            return {\n                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n            };\n        }),\n        path2curve = R._path2curve = cacher(function (path, path2) {\n            var pth = !path2 && paths(path);\n            if (!path2 && pth.curve) {\n                return pathClone(pth.curve);\n            }\n            var p = pathToAbsolute(path),\n                p2 = path2 && pathToAbsolute(path2),\n                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n                processPath = function (path, d, pcom) {\n                    var nx, ny, tq = {T:1, Q:1};\n                    if (!path) {\n                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                    }\n                    !(path[0] in tq) && (d.qx = d.qy = null);\n                    switch (path[0]) {\n                        case \"M\":\n                            d.X = path[1];\n                            d.Y = path[2];\n                            break;\n                        case \"A\":\n                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n                            break;\n                        case \"S\":\n                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                                nx = d.x * 2 - d.bx;          // And reflect the previous\n                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                            }\n                            else {                            // or some else or nothing\n                                nx = d.x;\n                                ny = d.y;\n                            }\n                            path = [\"C\", nx, ny][concat](path.slice(1));\n                            break;\n                        case \"T\":\n                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                                d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                            }\n                            else {                            // or something else or nothing\n                                d.qx = d.x;\n                                d.qy = d.y;\n                            }\n                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                            break;\n                        case \"Q\":\n                            d.qx = path[1];\n                            d.qy = path[2];\n                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                            break;\n                        case \"L\":\n                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n                            break;\n                        case \"H\":\n                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n                            break;\n                        case \"V\":\n                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n                            break;\n                        case \"Z\":\n                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n                            break;\n                    }\n                    return path;\n                },\n                fixArc = function (pp, i) {\n                    if (pp[i].length > 7) {\n                        pp[i].shift();\n                        var pi = pp[i];\n                        while (pi.length) {\n                            pcoms1[i]=\"A\"; // if created multiple C:s, their original seg is saved\n                            p2 && (pcoms2[i]=\"A\"); // the same as above\n                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n                        }\n                        pp.splice(i, 1);\n                        ii = mmax(p.length, p2 && p2.length || 0);\n                    }\n                },\n                fixM = function (path1, path2, a1, a2, i) {\n                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                        a1.bx = 0;\n                        a1.by = 0;\n                        a1.x = path1[i][1];\n                        a1.y = path1[i][2];\n                        ii = mmax(p.length, p2 && p2.length || 0);\n                    }\n                },\n                pcoms1 = [], // path commands of original path p\n                pcoms2 = [], // path commands of original path p2\n                pfirst = \"\", // temporary holder for original path command\n                pcom = \"\"; // holder for previous path command of original path\n            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n                p[i] && (pfirst = p[i][0]); // save current path command\n\n                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n                {\n                    pcoms1[i] = pfirst; // Save current path command\n                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n                }\n                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n                // which may produce multiple C:s\n                // so we have to make sure that C is also C in original path\n\n                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n                if (p2) { // the same procedures is done to p2\n                    p2[i] && (pfirst = p2[i][0]);\n                    if (pfirst != \"C\")\n                    {\n                        pcoms2[i] = pfirst;\n                        i && (pcom = pcoms2[i-1]);\n                    }\n                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n                    if (pcoms2[i]!=\"A\" && pfirst==\"C\") pcoms2[i]=\"C\";\n\n                    fixArc(p2, i);\n                }\n                fixM(p, p2, attrs, attrs2, i);\n                fixM(p2, p, attrs2, attrs, i);\n                var seg = p[i],\n                    seg2 = p2 && p2[i],\n                    seglen = seg.length,\n                    seg2len = p2 && seg2.length;\n                attrs.x = seg[seglen - 2];\n                attrs.y = seg[seglen - 1];\n                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n                attrs2.x = p2 && seg2[seg2len - 2];\n                attrs2.y = p2 && seg2[seg2len - 1];\n            }\n            if (!p2) {\n                pth.curve = pathClone(p);\n            }\n            return p2 ? [p, p2] : p;\n        }, null, pathClone),\n        parseDots = R._parseDots = cacher(function (gradient) {\n            var dots = [];\n            for (var i = 0, ii = gradient.length; i < ii; i++) {\n                var dot = {},\n                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n                dot.color = R.getRGB(par[1]);\n                if (dot.color.error) {\n                    return null;\n                }\n                dot.color = dot.color.hex;\n                par[2] && (dot.offset = par[2] + \"%\");\n                dots.push(dot);\n            }\n            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n                if (!dots[i].offset) {\n                    var start = toFloat(dots[i - 1].offset || 0),\n                        end = 0;\n                    for (var j = i + 1; j < ii; j++) {\n                        if (dots[j].offset) {\n                            end = dots[j].offset;\n                            break;\n                        }\n                    }\n                    if (!end) {\n                        end = 100;\n                        j = ii;\n                    }\n                    end = toFloat(end);\n                    var d = (end - start) / (j - i + 1);\n                    for (; i < j; i++) {\n                        start += d;\n                        dots[i].offset = start + \"%\";\n                    }\n                }\n            }\n            return dots;\n        }),\n        tear = R._tear = function (el, paper) {\n            el == paper.top && (paper.top = el.prev);\n            el == paper.bottom && (paper.bottom = el.next);\n            el.next && (el.next.prev = el.prev);\n            el.prev && (el.prev.next = el.next);\n        },\n        tofront = R._tofront = function (el, paper) {\n            if (paper.top === el) {\n                return;\n            }\n            tear(el, paper);\n            el.next = null;\n            el.prev = paper.top;\n            paper.top.next = el;\n            paper.top = el;\n        },\n        toback = R._toback = function (el, paper) {\n            if (paper.bottom === el) {\n                return;\n            }\n            tear(el, paper);\n            el.next = paper.bottom;\n            el.prev = null;\n            paper.bottom.prev = el;\n            paper.bottom = el;\n        },\n        insertafter = R._insertafter = function (el, el2, paper) {\n            tear(el, paper);\n            el2 == paper.top && (paper.top = el);\n            el2.next && (el2.next.prev = el);\n            el.next = el2.next;\n            el.prev = el2;\n            el2.next = el;\n        },\n        insertbefore = R._insertbefore = function (el, el2, paper) {\n            tear(el, paper);\n            el2 == paper.bottom && (paper.bottom = el);\n            el2.prev && (el2.prev.next = el);\n            el.prev = el2.prev;\n            el2.prev = el;\n            el.next = el2;\n        },\n        /*\\\n         * Raphael.toMatrix\n         [ method ]\n         **\n         * Utility method\n         **\n         * Returns matrix of transformations applied to a given path\n         > Parameters\n         - path (string) path string\n         - transform (string|array) transformation string\n         = (object) @Matrix\n        \\*/\n        toMatrix = R.toMatrix = function (path, transform) {\n            var bb = pathDimensions(path),\n                el = {\n                    _: {\n                        transform: E\n                    },\n                    getBBox: function () {\n                        return bb;\n                    }\n                };\n            extractTransform(el, transform);\n            return el.matrix;\n        },\n        /*\\\n         * Raphael.transformPath\n         [ method ]\n         **\n         * Utility method\n         **\n         * Returns path transformed by a given transformation\n         > Parameters\n         - path (string) path string\n         - transform (string|array) transformation string\n         = (string) path\n        \\*/\n        transformPath = R.transformPath = function (path, transform) {\n            return mapPath(path, toMatrix(path, transform));\n        },\n        extractTransform = R._extractTransform = function (el, tstr) {\n            if (tstr == null) {\n                return el._.transform;\n            }\n            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n            var tdata = R.parseTransformString(tstr),\n                deg = 0,\n                dx = 0,\n                dy = 0,\n                sx = 1,\n                sy = 1,\n                _ = el._,\n                m = new Matrix;\n            _.transform = tdata || [];\n            if (tdata) {\n                for (var i = 0, ii = tdata.length; i < ii; i++) {\n                    var t = tdata[i],\n                        tlen = t.length,\n                        command = Str(t[0]).toLowerCase(),\n                        absolute = t[0] != command,\n                        inver = absolute ? m.invert() : 0,\n                        x1,\n                        y1,\n                        x2,\n                        y2,\n                        bb;\n                    if (command == \"t\" && tlen == 3) {\n                        if (absolute) {\n                            x1 = inver.x(0, 0);\n                            y1 = inver.y(0, 0);\n                            x2 = inver.x(t[1], t[2]);\n                            y2 = inver.y(t[1], t[2]);\n                            m.translate(x2 - x1, y2 - y1);\n                        } else {\n                            m.translate(t[1], t[2]);\n                        }\n                    } else if (command == \"r\") {\n                        if (tlen == 2) {\n                            bb = bb || el.getBBox(1);\n                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                            deg += t[1];\n                        } else if (tlen == 4) {\n                            if (absolute) {\n                                x2 = inver.x(t[2], t[3]);\n                                y2 = inver.y(t[2], t[3]);\n                                m.rotate(t[1], x2, y2);\n                            } else {\n                                m.rotate(t[1], t[2], t[3]);\n                            }\n                            deg += t[1];\n                        }\n                    } else if (command == \"s\") {\n                        if (tlen == 2 || tlen == 3) {\n                            bb = bb || el.getBBox(1);\n                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                            sx *= t[1];\n                            sy *= t[tlen - 1];\n                        } else if (tlen == 5) {\n                            if (absolute) {\n                                x2 = inver.x(t[3], t[4]);\n                                y2 = inver.y(t[3], t[4]);\n                                m.scale(t[1], t[2], x2, y2);\n                            } else {\n                                m.scale(t[1], t[2], t[3], t[4]);\n                            }\n                            sx *= t[1];\n                            sy *= t[2];\n                        }\n                    } else if (command == \"m\" && tlen == 7) {\n                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n                    }\n                    _.dirtyT = 1;\n                    el.matrix = m;\n                }\n            }\n\n            /*\\\n             * Element.matrix\n             [ property (object) ]\n             **\n             * Keeps @Matrix object, which represents element transformation\n            \\*/\n            el.matrix = m;\n\n            _.sx = sx;\n            _.sy = sy;\n            _.deg = deg;\n            _.dx = dx = m.e;\n            _.dy = dy = m.f;\n\n            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n                _.bbox.x += +dx;\n                _.bbox.y += +dy;\n            } else {\n                _.dirtyT = 1;\n            }\n        },\n        getEmpty = function (item) {\n            var l = item[0];\n            switch (l.toLowerCase()) {\n                case \"t\": return [l, 0, 0];\n                case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n                case \"r\": if (item.length == 4) {\n                    return [l, 0, item[2], item[3]];\n                } else {\n                    return [l, 0];\n                }\n                case \"s\": if (item.length == 5) {\n                    return [l, 1, 1, item[3], item[4]];\n                } else if (item.length == 3) {\n                    return [l, 1, 1];\n                } else {\n                    return [l, 1];\n                }\n            }\n        },\n        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n            t1 = R.parseTransformString(t1) || [];\n            t2 = R.parseTransformString(t2) || [];\n            var maxlength = mmax(t1.length, t2.length),\n                from = [],\n                to = [],\n                i = 0, j, jj,\n                tt1, tt2;\n            for (; i < maxlength; i++) {\n                tt1 = t1[i] || getEmpty(t2[i]);\n                tt2 = t2[i] || getEmpty(tt1);\n                if ((tt1[0] != tt2[0]) ||\n                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n                    ) {\n                    return;\n                }\n                from[i] = [];\n                to[i] = [];\n                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n                    j in tt1 && (from[i][j] = tt1[j]);\n                    j in tt2 && (to[i][j] = tt2[j]);\n                }\n            }\n            return {\n                from: from,\n                to: to\n            };\n        };\n    R._getContainer = function (x, y, w, h) {\n        var container;\n        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n        if (container == null) {\n            return;\n        }\n        if (container.tagName) {\n            if (y == null) {\n                return {\n                    container: container,\n                    width: container.style.pixelWidth || container.offsetWidth,\n                    height: container.style.pixelHeight || container.offsetHeight\n                };\n            } else {\n                return {\n                    container: container,\n                    width: y,\n                    height: w\n                };\n            }\n        }\n        return {\n            container: 1,\n            x: x,\n            y: y,\n            width: w,\n            height: h\n        };\n    };\n    /*\\\n     * Raphael.pathToRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to relative form\n     > Parameters\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments.\n    \\*/\n    R.pathToRelative = pathToRelative;\n    R._engine = {};\n    /*\\\n     * Raphael.path2curve\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic bezier curves.\n     > Parameters\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments.\n    \\*/\n    R.path2curve = path2curve;\n    /*\\\n     * Raphael.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns matrix based on given parameters.\n     > Parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     = (object) @Matrix\n    \\*/\n    R.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n    function Matrix(a, b, c, d, e, f) {\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds given matrix to existing one.\n         > Parameters\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            var out = [[], [], []],\n                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n                x, y, z, res;\n\n            if (a && a instanceof Matrix) {\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n            }\n\n            for (x = 0; x < 3; x++) {\n                for (y = 0; y < 3; y++) {\n                    res = 0;\n                    for (z = 0; z < 3; z++) {\n                        res += m[x][z] * matrix[z][y];\n                    }\n                    out[x][y] = res;\n                }\n            }\n            this.a = out[0][0];\n            this.b = out[1][0];\n            this.c = out[0][1];\n            this.d = out[1][1];\n            this.e = out[0][2];\n            this.f = out[1][2];\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         > Parameters\n         - x (number)\n         - y (number)\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.add(1, 0, 0, 1, x, y);\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         > Parameters\n         - x (number)\n         - y (number) #optional\n         - cx (number) #optional\n         - cy (number) #optional\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n            this.add(x, 0, 0, y, 0, 0);\n            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         > Parameters\n         - a (number)\n         - x (number)\n         - y (number)\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = R.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         > Parameters\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         > Parameters\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return R.svg ?\n                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n        };\n        matrixproto.toFilter = function () {\n            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +\n                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +\n                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.c], [this.b, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            // rotation\n            var sin = -row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = R.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = R.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Return transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this[split]();\n            if (s.isSimple) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n\n    // WebKit rendering bug workaround method\n    var version = navigator.userAgent.match(/Version\\/(.*?)\\s/) || navigator.userAgent.match(/Chrome\\/(\\d+)/);\n    if ((navigator.vendor == \"Apple Computer, Inc.\") && (version && version[1] < 4 || navigator.platform.slice(0, 2) == \"iP\") ||\n        (navigator.vendor == \"Google Inc.\" && version && version[1] < 8)) {\n        /*\\\n         * Paper.safari\n         [ method ]\n         **\n         * There is an inconvenient rendering bug in Safari (WebKit):\n         * sometimes the rendering should be forced.\n         * This method should help with dealing with this bug.\n        \\*/\n        paperproto.safari = function () {\n            var rect = this.rect(-99, -99, this.width + 99, this.height + 99).attr({stroke: \"none\"});\n            setTimeout(function () {rect.remove();});\n        };\n    } else {\n        paperproto.safari = fun;\n    }\n\n    var preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    getEventPosition = function (e) {\n        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n        return {\n            x: e.clientX + scrollX,\n            y: e.clientY + scrollY\n        };\n    },\n    addEvent = (function () {\n        if (g.doc.addEventListener) {\n            return function (obj, type, fn, element) {\n                var f = function (e) {\n                    var pos = getEventPosition(e);\n                    return fn.call(element, e, pos.x, pos.y);\n                };\n                obj.addEventListener(type, f, false);\n\n                if (supportsTouch && touchMap[type]) {\n                    var _f = function (e) {\n                        var pos = getEventPosition(e),\n                            olde = e;\n\n                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                            if (e.targetTouches[i].target == obj) {\n                                e = e.targetTouches[i];\n                                e.originalEvent = olde;\n                                e.preventDefault = preventTouch;\n                                e.stopPropagation = stopTouch;\n                                break;\n                            }\n                        }\n\n                        return fn.call(element, e, pos.x, pos.y);\n                    };\n                    obj.addEventListener(touchMap[type], _f, false);\n                }\n\n                return function () {\n                    obj.removeEventListener(type, f, false);\n\n                    if (supportsTouch && touchMap[type])\n                        obj.removeEventListener(touchMap[type], _f, false);\n\n                    return true;\n                };\n            };\n        } else if (g.doc.attachEvent) {\n            return function (obj, type, fn, element) {\n                var f = function (e) {\n                    e = e || g.win.event;\n                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n                        x = e.clientX + scrollX,\n                        y = e.clientY + scrollY;\n                    e.preventDefault = e.preventDefault || preventDefault;\n                    e.stopPropagation = e.stopPropagation || stopPropagation;\n                    return fn.call(element, e, x, y);\n                };\n                obj.attachEvent(\"on\" + type, f);\n                var detacher = function () {\n                    obj.detachEvent(\"on\" + type, f);\n                    return true;\n                };\n                return detacher;\n            };\n        }\n    })(),\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch && e.touches) {\n                var i = e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            g.win.opera && parent.removeChild(node);\n            node.style.display = \"none\";\n            o = dragi.el.paper.getElementByPoint(x, y);\n            node.style.display = display;\n            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        R.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n        }\n        drag = [];\n    },\n    /*\\\n     * Raphael.el\n     [ property (object) ]\n     **\n     * You can add your own method to elements. This is usefull when you want to hack default functionality or\n     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n     > Usage\n     | Raphael.el.red = function () {\n     |     this.attr({fill: \"#f00\"});\n     | };\n     | // then use it\n     | paper.circle(100, 100, 20).red();\n    \\*/\n    elproto = R.el = {};\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds event handler for click for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes event handler for click for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds event handler for double click for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes event handler for double click for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds event handler for mousedown for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes event handler for mousedown for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds event handler for mousemove for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes event handler for mousemove for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds event handler for mouseout for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes event handler for mouseout for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds event handler for mouseover for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes event handler for mouseover for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds event handler for mouseup for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes event handler for mouseup for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds event handler for touchstart for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes event handler for touchstart for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds event handler for touchmove for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes event handler for touchmove for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds event handler for touchend for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes event handler for touchend for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds event handler for touchcancel for the element.\n     > Parameters\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes event handler for touchcancel for the element.\n     > Parameters\n     - handler (function) #optional handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            R[eventName] = elproto[eventName] = function (fn, scope) {\n                if (R.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n                }\n                return this;\n            };\n            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--){\n                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n                        events[l].unbind();\n                        events.splice(l, 1);\n                        !events.length && delete this.events;\n                    }\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value asociated with given key.\n     **\n     * See also @Element.removeData\n     > Parameters\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     * or, if key and value are not specified:\n     = (object) Key/value pairs for all the data associated with the element.\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0) {\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (R.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"raphael.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     > Parameters\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n     /*\\\n     * Element.getData\n     [ method ]\n     **\n     * Retrieves the element data\n     = (object) data\n    \\*/\n    elproto.getData = function () {\n        return clone(eldata[this.id] || {});\n    };\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds event handlers for hover for the element.\n     > Parameters\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes event handlers for hover for the element.\n     > Parameters\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for drag of the element.\n     > Parameters\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events will be triggered: `drag.start.<id>` on start,\n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n     * `drag.over.<id>` will be fired as well.\n     *\n     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler will be called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        function start(e) {\n            (e.originalEvent || e).preventDefault();\n            var x = e.clientX,\n                y = e.clientY,\n                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n            this._drag.id = e.identifier;\n            if (supportsTouch && e.touches) {\n                var i = e.touches.length, touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    this._drag.id = touch.identifier;\n                    if (touch.identifier == this._drag.id) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        break;\n                    }\n                }\n            }\n            this._drag.x = x + scrollX;\n            this._drag.y = y + scrollY;\n            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n        }\n        this._drag = {};\n        draggable.push({el: this, start: start});\n        this.mousedown(start);\n        return this;\n    };\n    /*\\\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n     > Parameters\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    elproto.onDragOver = function (f) {\n        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n    };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from given element.\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].start);\n            draggable.splice(i, 1);\n            eve.unbind(\"raphael.drag.*.\" + this.id);\n        }\n        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n        drag = [];\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle.\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) Raphaël element object with type “circle”\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    paperproto.circle = function (x, y, r) {\n        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle.\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - r (number) #optional radius for rounded corners, default is 0\n     = (object) Raphaël element object with type “rect”\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    paperproto.rect = function (x, y, w, h, r) {\n        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse.\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) Raphaël element object with type “ellipse”\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    paperproto.ellipse = function (x, y, rx, ry) {\n        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a path element by given path data string.\n     > Parameters\n     - pathString (string) #optional path string in SVG format.\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n     | \"M10,20L30,40\"\n     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n    \\*/\n    paperproto.path = function (pathString) {\n        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n        var out = R._engine.path(R.format[apply](R, arguments), this);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Embeds an image into the surface.\n     **\n     > Parameters\n     **\n     - src (string) URI of the source image\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) Raphaël element object with type “image”\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    paperproto.image = function (src, x, y, w, h) {\n        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string. If you need line breaks, put “\\n” in the string.\n     **\n     > Parameters\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string) The text string to draw\n     = (object) Raphaël element object with type “text”\n     **\n     > Usage\n     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n    \\*/\n    paperproto.text = function (x, y, text) {\n        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Paper.set\n     [ method ]\n     **\n     * Creates array-like object to keep and operate several elements at once.\n     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n     = (object) array-like object that represents set of elements\n     **\n     > Usage\n     | var st = paper.set();\n     | st.push(\n     |     paper.circle(10, 10, 5),\n     |     paper.circle(30, 10, 5)\n     | );\n     | st.attr({fill: \"red\"}); // changes the fill of both circles\n    \\*/\n    paperproto.set = function (itemsArray) {\n        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n        var out = new Set(itemsArray);\n        this.__set__ && this.__set__.push(out);\n        out[\"paper\"] = this;\n        out[\"type\"] = \"set\";\n        return out;\n    };\n    /*\\\n     * Paper.setStart\n     [ method ]\n     **\n     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n     * @Paper.setFinish will be added to the set.\n     **\n     > Usage\n     | paper.setStart();\n     | paper.circle(10, 10, 5),\n     | paper.circle(30, 10, 5)\n     | var st = paper.setFinish();\n     | st.attr({fill: \"red\"}); // changes the fill of both circles\n    \\*/\n    paperproto.setStart = function (set) {\n        this.__set__ = set || this.set();\n    };\n    /*\\\n     * Paper.setFinish\n     [ method ]\n     **\n     * See @Paper.setStart. This method finishes catching and returns resulting set.\n     **\n     = (object) set\n    \\*/\n    paperproto.setFinish = function (set) {\n        var out = this.__set__;\n        delete this.__set__;\n        return out;\n    };\n    /*\\\n     * Paper.getSize\n     [ method ]\n     **\n     * Obtains current paper actual size.\n     **\n     = (object)\n     \\*/\n    paperproto.getSize = function () {\n        var container = this.canvas.parentNode;\n        return {\n            width: container.offsetWidth,\n            height: container.offsetHeight\n                };\n        };\n    /*\\\n     * Paper.setSize\n     [ method ]\n     **\n     * If you need to change dimensions of the canvas call this method\n     **\n     > Parameters\n     **\n     - width (number) new width of the canvas\n     - height (number) new height of the canvas\n    \\*/\n    paperproto.setSize = function (width, height) {\n        return R._engine.setSize.call(this, width, height);\n    };\n    /*\\\n     * Paper.setViewBox\n     [ method ]\n     **\n     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n     * specifying new boundaries.\n     **\n     > Parameters\n     **\n     - x (number) new x position, default is `0`\n     - y (number) new y position, default is `0`\n     - w (number) new width of the canvas\n     - h (number) new height of the canvas\n     - fit (boolean) `true` if you want graphics to fit into new boundary box\n    \\*/\n    paperproto.setViewBox = function (x, y, w, h, fit) {\n        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n    };\n    /*\\\n     * Paper.top\n     [ property ]\n     **\n     * Points to the topmost element on the paper\n    \\*/\n    /*\\\n     * Paper.bottom\n     [ property ]\n     **\n     * Points to the bottom element on the paper\n    \\*/\n    paperproto.top = paperproto.bottom = null;\n    /*\\\n     * Paper.raphael\n     [ property ]\n     **\n     * Points to the @Raphael object/function\n    \\*/\n    paperproto.raphael = R;\n    var getOffset = function (elem) {\n        var box = elem.getBoundingClientRect(),\n            doc = elem.ownerDocument,\n            body = doc.body,\n            docElem = doc.documentElement,\n            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n        return {\n            y: top,\n            x: left\n        };\n    };\n    /*\\\n     * Paper.getElementByPoint\n     [ method ]\n     **\n     * Returns you topmost element under given point.\n     **\n     = (object) Raphaël element object\n     > Parameters\n     **\n     - x (number) x coordinate from the top left corner of the window\n     - y (number) y coordinate from the top left corner of the window\n     > Usage\n     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n    \\*/\n    paperproto.getElementByPoint = function (x, y) {\n        var paper = this,\n            svg = paper.canvas,\n            target = g.doc.elementFromPoint(x, y);\n        if (g.win.opera && target.tagName == \"svg\") {\n            var so = getOffset(svg),\n                sr = svg.createSVGRect();\n            sr.x = x - so.x;\n            sr.y = y - so.y;\n            sr.width = sr.height = 1;\n            var hits = svg.getIntersectionList(sr, null);\n            if (hits.length) {\n                target = hits[hits.length - 1];\n            }\n        }\n        if (!target) {\n            return null;\n        }\n        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n            target = target.parentNode;\n        }\n        target == paper.canvas.parentNode && (target = svg);\n        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n        return target;\n    };\n\n    /*\\\n     * Paper.getElementsByBBox\n     [ method ]\n     **\n     * Returns set of elements that have an intersecting bounding box\n     **\n     > Parameters\n     **\n     - bbox (object) bbox to check with\n     = (object) @Set\n     \\*/\n    paperproto.getElementsByBBox = function (bbox) {\n        var set = this.set();\n        this.forEach(function (el) {\n            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n                set.push(el);\n            }\n        });\n        return set;\n    };\n\n    /*\\\n     * Paper.getById\n     [ method ]\n     **\n     * Returns you element by its internal ID.\n     **\n     > Parameters\n     **\n     - id (number) id\n     = (object) Raphaël element object\n    \\*/\n    paperproto.getById = function (id) {\n        var bot = this.bottom;\n        while (bot) {\n            if (bot.id == id) {\n                return bot;\n            }\n            bot = bot.next;\n        }\n        return null;\n    };\n    /*\\\n     * Paper.forEach\n     [ method ]\n     **\n     * Executes given function for each element on the paper\n     *\n     * If callback function returns `false` it will stop loop running.\n     **\n     > Parameters\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Paper object\n     > Usage\n     | paper.forEach(function (el) {\n     |     el.attr({ stroke: \"blue\" });\n     | });\n    \\*/\n    paperproto.forEach = function (callback, thisArg) {\n        var bot = this.bottom;\n        while (bot) {\n            if (callback.call(thisArg, bot) === false) {\n                return this;\n            }\n            bot = bot.next;\n        }\n        return this;\n    };\n    /*\\\n     * Paper.getElementsByPoint\n     [ method ]\n     **\n     * Returns set of elements that have common point inside\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the point\n     - y (number) y coordinate of the point\n     = (object) @Set\n    \\*/\n    paperproto.getElementsByPoint = function (x, y) {\n        var set = this.set();\n        this.forEach(function (el) {\n            if (el.isPointInside(x, y)) {\n                set.push(el);\n            }\n        });\n        return set;\n    };\n    function x_y() {\n        return this.x + S + this.y;\n    }\n    function x_y_w_h() {\n        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n    }\n    /*\\\n     * Element.isPointInside\n     [ method ]\n     **\n     * Determine if given point is inside this element’s shape\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the point\n     - y (number) y coordinate of the point\n     = (boolean) `true` if point inside the shape\n    \\*/\n    elproto.isPointInside = function (x, y) {\n        var rp = this.realPath = getPath[this.type](this);\n        if (this.attr('transform') && this.attr('transform').length) {\n            rp = R.transformPath(rp, this.attr('transform'));\n        }\n        return R.isPointInsidePath(rp, x, y);\n    };\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Return bounding box for a given element\n     **\n     > Parameters\n     **\n     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n     = (object) Bounding box object:\n     o {\n     o     x: (number) top left corner x\n     o     y: (number) top left corner y\n     o     x2: (number) bottom right corner x\n     o     y2: (number) bottom right corner y\n     o     width: (number) width\n     o     height: (number) height\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.removed) {\n            return {};\n        }\n        var _ = this._;\n        if (isWithoutTransform) {\n            if (_.dirty || !_.bboxwt) {\n                this.realPath = getPath[this.type](this);\n                _.bboxwt = pathDimensions(this.realPath);\n                _.bboxwt.toString = x_y_w_h;\n                _.dirty = 0;\n            }\n            return _.bboxwt;\n        }\n        if (_.dirty || _.dirtyT || !_.bbox) {\n            if (_.dirty || !this.realPath) {\n                _.bboxwt = 0;\n                this.realPath = getPath[this.type](this);\n            }\n            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n            _.bbox.toString = x_y_w_h;\n            _.dirty = _.dirtyT = 0;\n        }\n        return _.bbox;\n    };\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     = (object) clone of a given element\n     **\n    \\*/\n    elproto.clone = function () {\n        if (this.removed) {\n            return null;\n        }\n        var out = this.paper[this.type]().attr(this.attr());\n        this.__set__ && this.__set__.push(out);\n        return out;\n    };\n    /*\\\n     * Element.glow\n     [ method ]\n     **\n     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n     *\n     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n     **\n     > Parameters\n     **\n     - glow (object) #optional parameters object with all properties optional:\n     o {\n     o     width (number) size of the glow, default is `10`\n     o     fill (boolean) will it be filled, default is `false`\n     o     opacity (number) opacity, default is `0.5`\n     o     offsetx (number) horizontal offset, default is `0`\n     o     offsety (number) vertical offset, default is `0`\n     o     color (string) glow colour, default is `black`\n     o }\n     = (object) @Paper.set of elements that represents glow\n    \\*/\n    elproto.glow = function (glow) {\n        if (this.type == \"text\") {\n            return null;\n        }\n        glow = glow || {};\n        var s = {\n            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n            fill: glow.fill || false,\n            opacity: glow.opacity || .5,\n            offsetx: glow.offsetx || 0,\n            offsety: glow.offsety || 0,\n            color: glow.color || \"#000\"\n        },\n            c = s.width / 2,\n            r = this.paper,\n            out = r.set(),\n            path = this.realPath || getPath[this.type](this);\n        path = this.matrix ? mapPath(path, this.matrix) : path;\n        for (var i = 1; i < c + 1; i++) {\n            out.push(r.path(path).attr({\n                stroke: s.color,\n                fill: s.fill ? s.color : \"none\",\n                \"stroke-linejoin\": \"round\",\n                \"stroke-linecap\": \"round\",\n                \"stroke-width\": +(s.width / c * i).toFixed(3),\n                opacity: +(s.opacity / c).toFixed(3)\n            }));\n        }\n        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n    };\n    var curveslengths = {},\n    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    },\n    getLengthFactory = function (istotal, subpath) {\n        return function (path, length, onlystart) {\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return {x: point.x, y: point.y, alpha: point.alpha};\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n            return point;\n        };\n    };\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    /*\\\n     * Raphael.getTotalLength\n     [ method ]\n     **\n     * Returns length of the given path in pixels.\n     **\n     > Parameters\n     **\n     - path (string) SVG path string.\n     **\n     = (number) length.\n    \\*/\n    R.getTotalLength = getTotalLength;\n    /*\\\n     * Raphael.getPointAtLength\n     [ method ]\n     **\n     * Return coordinates of the point located at the given length on the given path.\n     **\n     > Parameters\n     **\n     - path (string) SVG path string\n     - length (number)\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate\n     o     y: (number) y coordinate\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    R.getPointAtLength = getPointAtLength;\n    /*\\\n     * Raphael.getSubpath\n     [ method ]\n     **\n     * Return subpath of a given path from given length to given length.\n     **\n     > Parameters\n     **\n     - path (string) SVG path string\n     - from (number) position of the start of the segment\n     - to (number) position of the end of the segment\n     **\n     = (string) pathstring for the segment\n    \\*/\n    R.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns length of the path in pixels. Only works for element of “path” type.\n     = (number) length.\n    \\*/\n    elproto.getTotalLength = function () {\n        var path = this.getPath();\n        if (!path) {\n            return;\n        }\n\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n\n        return getTotalLength(path);\n    };\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n     **\n     > Parameters\n     **\n     - length (number)\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate\n     o     y: (number) y coordinate\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        var path = this.getPath();\n        if (!path) {\n            return;\n        }\n\n        return getPointAtLength(path, length);\n    };\n    /*\\\n     * Element.getPath\n     [ method ]\n     **\n     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n     = (object) path\n     **\n    \\*/\n    elproto.getPath = function () {\n        var path,\n            getPath = R._getPath[this.type];\n\n        if (this.type == \"text\" || this.type == \"set\") {\n            return;\n        }\n\n        if (getPath) {\n            path = getPath(this);\n        }\n\n        return path;\n    };\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n     **\n     > Parameters\n     **\n     - from (number) position of the start of the segment\n     - to (number) position of the end of the segment\n     **\n     = (string) pathstring for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        var path = this.getPath();\n        if (!path) {\n            return;\n        }\n\n        return R.getSubpath(path, from, to);\n    };\n    /*\\\n     * Raphael.easing_formulas\n     [ property ]\n     **\n     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n     # <ul>\n     #     <li>“linear”</li>\n     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n     #     <li>“>” or “easeOut” or “ease-out”</li>\n     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n     #     <li>“backIn” or “back-in”</li>\n     #     <li>“backOut” or “back-out”</li>\n     #     <li>“elastic”</li>\n     #     <li>“bounce”</li>\n     # </ul>\n     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n    \\*/\n    var ef = R.easing_formulas = {\n        linear: function (n) {\n            return n;\n        },\n        \"<\": function (n) {\n            return pow(n, 1.7);\n        },\n        \">\": function (n) {\n            return pow(n, .48);\n        },\n        \"<>\": function (n) {\n            var q = .48 - n / 1.04,\n                Q = math.sqrt(.1734 + q * q),\n                x = Q - q,\n                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n                y = -Q - q,\n                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n                t = X + Y + .5;\n            return (1 - t) * 3 * t * t + t * t * t;\n        },\n        backIn: function (n) {\n            var s = 1.70158;\n            return n * n * ((s + 1) * n - s);\n        },\n        backOut: function (n) {\n            n = n - 1;\n            var s = 1.70158;\n            return n * n * ((s + 1) * n + s) + 1;\n        },\n        elastic: function (n) {\n            if (n == !!n) {\n                return n;\n            }\n            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n        },\n        bounce: function (n) {\n            var s = 7.5625,\n                p = 2.75,\n                l;\n            if (n < (1 / p)) {\n                l = s * n * n;\n            } else {\n                if (n < (2 / p)) {\n                    n -= (1.5 / p);\n                    l = s * n * n + .75;\n                } else {\n                    if (n < (2.5 / p)) {\n                        n -= (2.25 / p);\n                        l = s * n * n + .9375;\n                    } else {\n                        n -= (2.625 / p);\n                        l = s * n * n + .984375;\n                    }\n                }\n            }\n            return l;\n        }\n    };\n    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n    ef[\"back-in\"] = ef.backIn;\n    ef[\"back-out\"] = ef.backOut;\n\n    var animationElements = [],\n        requestAnimFrame = window.requestAnimationFrame       ||\n                           window.webkitRequestAnimationFrame ||\n                           window.mozRequestAnimationFrame    ||\n                           window.oRequestAnimationFrame      ||\n                           window.msRequestAnimationFrame     ||\n                           function (callback) {\n                               setTimeout(callback, 16);\n                           },\n        animation = function () {\n            var Now = +new Date,\n                l = 0;\n            for (; l < animationElements.length; l++) {\n                var e = animationElements[l];\n                if (e.el.removed || e.paused) {\n                    continue;\n                }\n                var time = Now - e.start,\n                    ms = e.ms,\n                    easing = e.easing,\n                    from = e.from,\n                    diff = e.diff,\n                    to = e.to,\n                    t = e.t,\n                    that = e.el,\n                    set = {},\n                    now,\n                    init = {},\n                    key;\n                if (e.initstatus) {\n                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n                    e.status = e.initstatus;\n                    delete e.initstatus;\n                    e.stop && animationElements.splice(l--, 1);\n                } else {\n                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n                }\n                if (time < 0) {\n                    continue;\n                }\n                if (time < ms) {\n                    var pos = easing(time / ms);\n                    for (var attr in from) if (from[has](attr)) {\n                        switch (availableAnimAttrs[attr]) {\n                            case nu:\n                                now = +from[attr] + pos * ms * diff[attr];\n                                break;\n                            case \"colour\":\n                                now = \"rgb(\" + [\n                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n                                ].join(\",\") + \")\";\n                                break;\n                            case \"path\":\n                                now = [];\n                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n                                    now[i] = [from[attr][i][0]];\n                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n                                    }\n                                    now[i] = now[i].join(S);\n                                }\n                                now = now.join(S);\n                                break;\n                            case \"transform\":\n                                if (diff[attr].real) {\n                                    now = [];\n                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n                                        now[i] = [from[attr][i][0]];\n                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n                                        }\n                                    }\n                                } else {\n                                    var get = function (i) {\n                                        return +from[attr][i] + pos * ms * diff[attr][i];\n                                    };\n                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n                                }\n                                break;\n                            case \"csv\":\n                                if (attr == \"clip-rect\") {\n                                    now = [];\n                                    i = 4;\n                                    while (i--) {\n                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n                                    }\n                                }\n                                break;\n                            default:\n                                var from2 = [][concat](from[attr]);\n                                now = [];\n                                i = that.paper.customAttributes[attr].length;\n                                while (i--) {\n                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n                                }\n                                break;\n                        }\n                        set[attr] = now;\n                    }\n                    that.attr(set);\n                    (function (id, that, anim) {\n                        setTimeout(function () {\n                            eve(\"raphael.anim.frame.\" + id, that, anim);\n                        });\n                    })(that.id, that, e.anim);\n                } else {\n                    (function(f, el, a) {\n                        setTimeout(function() {\n                            eve(\"raphael.anim.frame.\" + el.id, el, a);\n                            eve(\"raphael.anim.finish.\" + el.id, el, a);\n                            R.is(f, \"function\") && f.call(el);\n                        });\n                    })(e.callback, that, e.anim);\n                    that.attr(to);\n                    animationElements.splice(l--, 1);\n                    if (e.repeat > 1 && !e.next) {\n                        for (key in to) if (to[has](key)) {\n                            init[key] = e.totalOrigin[key];\n                        }\n                        e.el.attr(init);\n                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n                    }\n                    if (e.next && !e.stop) {\n                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n                    }\n                }\n            }\n            R.svg && that && that.paper && that.paper.safari();\n            animationElements.length && requestAnimFrame(animation);\n        },\n        upto255 = function (color) {\n            return color > 255 ? 255 : color < 0 ? 0 : color;\n        };\n    /*\\\n     * Element.animateWith\n     [ method ]\n     **\n     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n     **\n     > Parameters\n     **\n     - el (object) element to sync with\n     - anim (object) animation to sync with\n     - params (object) #optional final attributes for the element, see also @Element.attr\n     - ms (number) #optional number of milliseconds for animation to run\n     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n     - callback (function) #optional callback function. Will be called at the end of animation.\n     * or\n     - element (object) element to sync with\n     - anim (object) animation to sync with\n     - animation (object) #optional animation object, see @Raphael.animation\n     **\n     = (object) original element\n    \\*/\n    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n        var element = this;\n        if (element.removed) {\n            callback && callback.call(element);\n            return element;\n        }\n        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n            x, y;\n        runAnimation(a, element, a.percents[0], null, element.attr());\n        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n                animationElements[ii - 1].start = animationElements[i].start;\n                break;\n            }\n        }\n        return element;\n        //\n        //\n        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n        //     status = element.status(anim);\n        // return this.animate(a).status(a, status * anim.ms / a.ms);\n    };\n    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n        var cx = 3 * p1x,\n            bx = 3 * (p2x - p1x) - cx,\n            ax = 1 - cx - bx,\n            cy = 3 * p1y,\n            by = 3 * (p2y - p1y) - cy,\n            ay = 1 - cy - by;\n        function sampleCurveX(t) {\n            return ((ax * t + bx) * t + cx) * t;\n        }\n        function solve(x, epsilon) {\n            var t = solveCurveX(x, epsilon);\n            return ((ay * t + by) * t + cy) * t;\n        }\n        function solveCurveX(x, epsilon) {\n            var t0, t1, t2, x2, d2, i;\n            for(t2 = x, i = 0; i < 8; i++) {\n                x2 = sampleCurveX(t2) - x;\n                if (abs(x2) < epsilon) {\n                    return t2;\n                }\n                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n                if (abs(d2) < 1e-6) {\n                    break;\n                }\n                t2 = t2 - x2 / d2;\n            }\n            t0 = 0;\n            t1 = 1;\n            t2 = x;\n            if (t2 < t0) {\n                return t0;\n            }\n            if (t2 > t1) {\n                return t1;\n            }\n            while (t0 < t1) {\n                x2 = sampleCurveX(t2);\n                if (abs(x2 - x) < epsilon) {\n                    return t2;\n                }\n                if (x > x2) {\n                    t0 = t2;\n                } else {\n                    t1 = t2;\n                }\n                t2 = (t1 - t0) / 2 + t0;\n            }\n            return t2;\n        }\n        return solve(t, 1 / (200 * duration));\n    }\n    elproto.onAnimation = function (f) {\n        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n        return this;\n    };\n    function Animation(anim, ms) {\n        var percents = [],\n            newAnim = {};\n        this.ms = ms;\n        this.times = 1;\n        if (anim) {\n            for (var attr in anim) if (anim[has](attr)) {\n                newAnim[toFloat(attr)] = anim[attr];\n                percents.push(toFloat(attr));\n            }\n            percents.sort(sortByNumber);\n        }\n        this.anim = newAnim;\n        this.top = percents[percents.length - 1];\n        this.percents = percents;\n    }\n    /*\\\n     * Animation.delay\n     [ method ]\n     **\n     * Creates a copy of existing animation object with given delay.\n     **\n     > Parameters\n     **\n     - delay (number) number of ms to pass between animation start and actual animation\n     **\n     = (object) new altered Animation object\n     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n     | circle1.animate(anim); // run the given animation immediately\n     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n    \\*/\n    Animation.prototype.delay = function (delay) {\n        var a = new Animation(this.anim, this.ms);\n        a.times = this.times;\n        a.del = +delay || 0;\n        return a;\n    };\n    /*\\\n     * Animation.repeat\n     [ method ]\n     **\n     * Creates a copy of existing animation object with given repetition.\n     **\n     > Parameters\n     **\n     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n     **\n     = (object) new altered Animation object\n    \\*/\n    Animation.prototype.repeat = function (times) {\n        var a = new Animation(this.anim, this.ms);\n        a.del = this.del;\n        a.times = math.floor(mmax(times, 0)) || 1;\n        return a;\n    };\n    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n        percent = toFloat(percent);\n        var params,\n            isInAnim,\n            isInAnimSet,\n            percents = [],\n            next,\n            prev,\n            timestamp,\n            ms = anim.ms,\n            from = {},\n            to = {},\n            diff = {};\n        if (status) {\n            for (i = 0, ii = animationElements.length; i < ii; i++) {\n                var e = animationElements[i];\n                if (e.el.id == element.id && e.anim == anim) {\n                    if (e.percent != percent) {\n                        animationElements.splice(i, 1);\n                        isInAnimSet = 1;\n                    } else {\n                        isInAnim = e;\n                    }\n                    element.attr(e.totalOrigin);\n                    break;\n                }\n            }\n        } else {\n            status = +to; // NaN\n        }\n        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n                percent = anim.percents[i];\n                prev = anim.percents[i - 1] || 0;\n                ms = ms / anim.top * (percent - prev);\n                next = anim.percents[i + 1];\n                params = anim.anim[percent];\n                break;\n            } else if (status) {\n                element.attr(anim.anim[anim.percents[i]]);\n            }\n        }\n        if (!params) {\n            return;\n        }\n        if (!isInAnim) {\n            for (var attr in params) if (params[has](attr)) {\n                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n                    from[attr] = element.attr(attr);\n                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n                    to[attr] = params[attr];\n                    switch (availableAnimAttrs[attr]) {\n                        case nu:\n                            diff[attr] = (to[attr] - from[attr]) / ms;\n                            break;\n                        case \"colour\":\n                            from[attr] = R.getRGB(from[attr]);\n                            var toColour = R.getRGB(to[attr]);\n                            diff[attr] = {\n                                r: (toColour.r - from[attr].r) / ms,\n                                g: (toColour.g - from[attr].g) / ms,\n                                b: (toColour.b - from[attr].b) / ms\n                            };\n                            break;\n                        case \"path\":\n                            var pathes = path2curve(from[attr], to[attr]),\n                                toPath = pathes[1];\n                            from[attr] = pathes[0];\n                            diff[attr] = [];\n                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n                                diff[attr][i] = [0];\n                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n                                }\n                            }\n                            break;\n                        case \"transform\":\n                            var _ = element._,\n                                eq = equaliseTransform(_[attr], to[attr]);\n                            if (eq) {\n                                from[attr] = eq.from;\n                                to[attr] = eq.to;\n                                diff[attr] = [];\n                                diff[attr].real = true;\n                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n                                    diff[attr][i] = [from[attr][i][0]];\n                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n                                    }\n                                }\n                            } else {\n                                var m = (element.matrix || new Matrix),\n                                    to2 = {\n                                        _: {transform: _.transform},\n                                        getBBox: function () {\n                                            return element.getBBox(1);\n                                        }\n                                    };\n                                from[attr] = [\n                                    m.a,\n                                    m.b,\n                                    m.c,\n                                    m.d,\n                                    m.e,\n                                    m.f\n                                ];\n                                extractTransform(to2, to[attr]);\n                                to[attr] = to2._.transform;\n                                diff[attr] = [\n                                    (to2.matrix.a - m.a) / ms,\n                                    (to2.matrix.b - m.b) / ms,\n                                    (to2.matrix.c - m.c) / ms,\n                                    (to2.matrix.d - m.d) / ms,\n                                    (to2.matrix.e - m.e) / ms,\n                                    (to2.matrix.f - m.f) / ms\n                                ];\n                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n                                // extractTransform(to2, to[attr]);\n                                // diff[attr] = [\n                                //     (to2._.sx - _.sx) / ms,\n                                //     (to2._.sy - _.sy) / ms,\n                                //     (to2._.deg - _.deg) / ms,\n                                //     (to2._.dx - _.dx) / ms,\n                                //     (to2._.dy - _.dy) / ms\n                                // ];\n                            }\n                            break;\n                        case \"csv\":\n                            var values = Str(params[attr])[split](separator),\n                                from2 = Str(from[attr])[split](separator);\n                            if (attr == \"clip-rect\") {\n                                from[attr] = from2;\n                                diff[attr] = [];\n                                i = from2.length;\n                                while (i--) {\n                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n                                }\n                            }\n                            to[attr] = values;\n                            break;\n                        default:\n                            values = [][concat](params[attr]);\n                            from2 = [][concat](from[attr]);\n                            diff[attr] = [];\n                            i = element.paper.customAttributes[attr].length;\n                            while (i--) {\n                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n                            }\n                            break;\n                    }\n                }\n            }\n            var easing = params.easing,\n                easyeasy = R.easing_formulas[easing];\n            if (!easyeasy) {\n                easyeasy = Str(easing).match(bezierrg);\n                if (easyeasy && easyeasy.length == 5) {\n                    var curve = easyeasy;\n                    easyeasy = function (t) {\n                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n                    };\n                } else {\n                    easyeasy = pipe;\n                }\n            }\n            timestamp = params.start || anim.start || +new Date;\n            e = {\n                anim: anim,\n                percent: percent,\n                timestamp: timestamp,\n                start: timestamp + (anim.del || 0),\n                status: 0,\n                initstatus: status || 0,\n                stop: false,\n                ms: ms,\n                easing: easyeasy,\n                from: from,\n                diff: diff,\n                to: to,\n                el: element,\n                callback: params.callback,\n                prev: prev,\n                next: next,\n                repeat: times || anim.times,\n                origin: element.attr(),\n                totalOrigin: totalOrigin\n            };\n            animationElements.push(e);\n            if (status && !isInAnim && !isInAnimSet) {\n                e.stop = true;\n                e.start = new Date - ms * status;\n                if (animationElements.length == 1) {\n                    return animation();\n                }\n            }\n            if (isInAnimSet) {\n                e.start = new Date - e.ms * status;\n            }\n            animationElements.length == 1 && requestAnimFrame(animation);\n        } else {\n            isInAnim.initstatus = status;\n            isInAnim.start = new Date - isInAnim.ms * status;\n        }\n        eve(\"raphael.anim.start.\" + element.id, element, anim);\n    }\n    /*\\\n     * Raphael.animation\n     [ method ]\n     **\n     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n     * See also @Animation.delay and @Animation.repeat methods.\n     **\n     > Parameters\n     **\n     - params (object) final attributes for the element, see also @Element.attr\n     - ms (number) number of milliseconds for animation to run\n     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n     - callback (function) #optional callback function. Will be called at the end of animation.\n     **\n     = (object) @Animation\n    \\*/\n    R.animation = function (params, ms, easing, callback) {\n        if (params instanceof Animation) {\n            return params;\n        }\n        if (R.is(easing, \"function\") || !easing) {\n            callback = callback || easing || null;\n            easing = null;\n        }\n        params = Object(params);\n        ms = +ms || 0;\n        var p = {},\n            json,\n            attr;\n        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n            json = true;\n            p[attr] = params[attr];\n        }\n        if (!json) {\n            // if percent-like syntax is used and end-of-all animation callback used\n            if(callback){\n                // find the last one\n                var lastKey = 0;\n                for(var i in params){\n                    var percent = toInt(i);\n                    if(params[has](i) && percent > lastKey){\n                        lastKey = percent;\n                    }\n                }\n                lastKey += '%';\n                // if already defined callback in the last keyframe, skip\n                !params[lastKey].callback && (params[lastKey].callback = callback);\n            }\n          return new Animation(params, ms);\n        } else {\n            easing && (p.easing = easing);\n            callback && (p.callback = callback);\n            return new Animation({100: p}, ms);\n        }\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Creates and starts animation for given element.\n     **\n     > Parameters\n     **\n     - params (object) final attributes for the element, see also @Element.attr\n     - ms (number) number of milliseconds for animation to run\n     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n     - callback (function) #optional callback function. Will be called at the end of animation.\n     * or\n     - animation (object) animation object, see @Raphael.animation\n     **\n     = (object) original element\n    \\*/\n    elproto.animate = function (params, ms, easing, callback) {\n        var element = this;\n        if (element.removed) {\n            callback && callback.call(element);\n            return element;\n        }\n        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n        runAnimation(anim, element, anim.percents[0], null, element.attr());\n        return element;\n    };\n    /*\\\n     * Element.setTime\n     [ method ]\n     **\n     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n     **\n     > Parameters\n     **\n     - anim (object) animation object\n     - value (number) number of milliseconds from the beginning of the animation\n     **\n     = (object) original element if `value` is specified\n     * Note, that during animation following events are triggered:\n     *\n     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n    \\*/\n    elproto.setTime = function (anim, value) {\n        if (anim && value != null) {\n            this.status(anim, mmin(value, anim.ms) / anim.ms);\n        }\n        return this;\n    };\n    /*\\\n     * Element.status\n     [ method ]\n     **\n     * Gets or sets the status of animation of the element.\n     **\n     > Parameters\n     **\n     - anim (object) #optional animation object\n     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n     **\n     = (number) status\n     * or\n     = (array) status if `anim` is not specified. Array of objects in format:\n     o {\n     o     anim: (object) animation object\n     o     status: (number) status\n     o }\n     * or\n     = (object) original element if `value` is specified\n    \\*/\n    elproto.status = function (anim, value) {\n        var out = [],\n            i = 0,\n            len,\n            e;\n        if (value != null) {\n            runAnimation(anim, this, -1, mmin(value, 1));\n            return this;\n        } else {\n            len = animationElements.length;\n            for (; i < len; i++) {\n                e = animationElements[i];\n                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n                    if (anim) {\n                        return e.status;\n                    }\n                    out.push({\n                        anim: e.anim,\n                        status: e.status\n                    });\n                }\n            }\n            if (anim) {\n                return 0;\n            }\n            return out;\n        }\n    };\n    /*\\\n     * Element.pause\n     [ method ]\n     **\n     * Stops animation of the element with ability to resume it later on.\n     **\n     > Parameters\n     **\n     - anim (object) #optional animation object\n     **\n     = (object) original element\n    \\*/\n    elproto.pause = function (anim) {\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n                animationElements[i].paused = true;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.resume\n     [ method ]\n     **\n     * Resumes animation if it was paused with @Element.pause method.\n     **\n     > Parameters\n     **\n     - anim (object) #optional animation object\n     **\n     = (object) original element\n    \\*/\n    elproto.resume = function (anim) {\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n            var e = animationElements[i];\n            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n                delete e.paused;\n                this.status(e.anim, e.status);\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops animation of the element.\n     **\n     > Parameters\n     **\n     - anim (object) #optional animation object\n     **\n     = (object) original element\n    \\*/\n    elproto.stop = function (anim) {\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n                animationElements.splice(i--, 1);\n            }\n        }\n        return this;\n    };\n    function stopAnimation(paper) {\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n            animationElements.splice(i--, 1);\n        }\n    }\n    eve.on(\"raphael.remove\", stopAnimation);\n    eve.on(\"raphael.clear\", stopAnimation);\n    elproto.toString = function () {\n        return \"Rapha\\xebl\\u2019s object\";\n    };\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set.\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it.\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set.\n     *\n     * If function returns `false` it will stop loop running.\n     **\n     > Parameters\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    for (var method in elproto) if (elproto[has](method)) {\n        setproto[method] = (function (methodname) {\n            return function () {\n                var arg = arguments;\n                return this.forEach(function (el) {\n                    el[methodname][apply](el, arg);\n                });\n            };\n        })(method);\n    }\n    setproto.attr = function (name, value) {\n        if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n            for (var j = 0, jj = name.length; j < jj; j++) {\n                this.items[j].attr(name[j]);\n            }\n        } else {\n            for (var i = 0, ii = this.items.length; i < ii; i++) {\n                this.items[i].attr(name, value);\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     > Parameters\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     > Parameters\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found & removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n    };\n    setproto.animate = function (params, ms, easing, callback) {\n        (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n        var len = this.items.length,\n            i = len,\n            item,\n            set = this,\n            collector;\n        if (!len) {\n            return this;\n        }\n        callback && (collector = function () {\n            !--len && callback.call(set);\n        });\n        easing = R.is(easing, string) ? easing : collector;\n        var anim = R.animation(params, ms, easing, collector);\n        item = this.items[--i].animate(anim);\n        while (i--) {\n            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n            (this.items[i] && !this.items[i].removed) || len--;\n        }\n        return this;\n    };\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin[apply](0, x);\n        y = mmin[apply](0, y);\n        x2 = mmax[apply](0, x2);\n        y2 = mmax[apply](0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y\n        };\n    };\n    setproto.clone = function (s) {\n        s = this.paper.set();\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Rapha\\xebl\\u2018s set\";\n    };\n\n    setproto.glow = function(glowConfig) {\n        var ret = this.paper.set();\n        this.forEach(function(shape, index){\n            var g = shape.glow(glowConfig);\n            if(g != null){\n                g.forEach(function(shape2, index2){\n                    ret.push(shape2);\n                });\n            }\n        });\n        return ret;\n    };\n\n\n    /*\\\n     * Set.isPointInside\n     [ method ]\n     **\n     * Determine if given point is inside this set’s elements\n     **\n     > Parameters\n     **\n     - x (number) x coordinate of the point\n     - y (number) y coordinate of the point\n     = (boolean) `true` if point is inside any of the set's elements\n     \\*/\n    setproto.isPointInside = function (x, y) {\n        var isPointInside = false;\n        this.forEach(function (el) {\n            if (el.isPointInside(x, y)) {\n                isPointInside = true;\n                return false; // stop loop\n            }\n        });\n        return isPointInside;\n    };\n\n    /*\\\n     * Raphael.registerFont\n     [ method ]\n     **\n     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n     * Returns original parameter, so it could be used with chaining.\n     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n     **\n     > Parameters\n     **\n     - font (object) the font to register\n     = (object) the font you passed in\n     > Usage\n     | Cufon.registerFont(Raphael.registerFont({…}));\n    \\*/\n    R.registerFont = function (font) {\n        if (!font.face) {\n            return font;\n        }\n        this.fonts = this.fonts || {};\n        var fontcopy = {\n                w: font.w,\n                face: {},\n                glyphs: {}\n            },\n            family = font.face[\"font-family\"];\n        for (var prop in font.face) if (font.face[has](prop)) {\n            fontcopy.face[prop] = font.face[prop];\n        }\n        if (this.fonts[family]) {\n            this.fonts[family].push(fontcopy);\n        } else {\n            this.fonts[family] = [fontcopy];\n        }\n        if (!font.svg) {\n            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n                var path = font.glyphs[glyph];\n                fontcopy.glyphs[glyph] = {\n                    w: path.w,\n                    k: {},\n                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";\n                        }) + \"z\"\n                };\n                if (path.k) {\n                    for (var k in path.k) if (path[has](k)) {\n                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n                    }\n                }\n            }\n        }\n        return font;\n    };\n    /*\\\n     * Paper.getFont\n     [ method ]\n     **\n     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n     **\n     > Parameters\n     **\n     - family (string) font family name or any word from it\n     - weight (string) #optional font weight\n     - style (string) #optional font style\n     - stretch (string) #optional font stretch\n     = (object) the font object\n     > Usage\n     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n    \\*/\n    paperproto.getFont = function (family, weight, style, stretch) {\n        stretch = stretch || \"normal\";\n        style = style || \"normal\";\n        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n        if (!R.fonts) {\n            return;\n        }\n        var font = R.fonts[family];\n        if (!font) {\n            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n                if (name.test(fontName)) {\n                    font = R.fonts[fontName];\n                    break;\n                }\n            }\n        }\n        var thefont;\n        if (font) {\n            for (var i = 0, ii = font.length; i < ii; i++) {\n                thefont = font[i];\n                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n                    break;\n                }\n            }\n        }\n        return thefont;\n    };\n    /*\\\n     * Paper.print\n     [ method ]\n     **\n     * Creates path that represent given text written using given font at given position with given size.\n     * Result of the method is path element that contains whole text as a separate path.\n     **\n     > Parameters\n     **\n     - x (number) x position of the text\n     - y (number) y position of the text\n     - string (string) text to print\n     - font (object) font object, see @Paper.getFont\n     - size (number) #optional size of the font, default is `16`\n     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n     - line_spacing (number) #optional number in range `1..3`, default is `1`\n     = (object) resulting path element, which consist of all letters\n     > Usage\n     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n    \\*/\n    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n        origin = origin || \"middle\"; // baseline|middle\n        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n        var letters = Str(string)[split](E),\n            shift = 0,\n            notfirst = 0,\n            path = E,\n            scale;\n        R.is(font, \"string\") && (font = this.getFont(font));\n        if (font) {\n            scale = (size || 16) / font.face[\"units-per-em\"];\n            var bb = font.face.bbox[split](separator),\n                top = +bb[0],\n                lineHeight = bb[3] - bb[1],\n                shifty = 0,\n                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n            for (var i = 0, ii = letters.length; i < ii; i++) {\n                if (letters[i] == \"\\n\") {\n                    shift = 0;\n                    curr = 0;\n                    notfirst = 0;\n                    shifty += lineHeight * line_spacing;\n                } else {\n                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n                        curr = font.glyphs[letters[i]];\n                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n                    notfirst = 1;\n                }\n                if (curr && curr.d) {\n                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n                }\n            }\n        }\n        return this.path(path).attr({\n            fill: \"#000\",\n            stroke: \"none\"\n        });\n    };\n\n    /*\\\n     * Paper.add\n     [ method ]\n     **\n     * Imports elements in JSON array in format `{type: type, <attributes>}`\n     **\n     > Parameters\n     **\n     - json (array)\n     = (object) resulting set of imported elements\n     > Usage\n     | paper.add([\n     |     {\n     |         type: \"circle\",\n     |         cx: 10,\n     |         cy: 10,\n     |         r: 5\n     |     },\n     |     {\n     |         type: \"rect\",\n     |         x: 10,\n     |         y: 10,\n     |         width: 10,\n     |         height: 10,\n     |         fill: \"#fc0\"\n     |     }\n     | ]);\n    \\*/\n    paperproto.add = function (json) {\n        if (R.is(json, \"array\")) {\n            var res = this.set(),\n                i = 0,\n                ii = json.length,\n                j;\n            for (; i < ii; i++) {\n                j = json[i] || {};\n                elements[has](j.type) && res.push(this[j.type]().attr(j));\n            }\n        }\n        return res;\n    };\n\n    /*\\\n     * Raphael.format\n     [ method ]\n     **\n     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n     **\n     > Parameters\n     **\n     - token (string) string to format\n     - … (string) rest of arguments will be treated as parameters for replacement\n     = (string) formated string\n     > Usage\n     | var x = 10,\n     |     y = 20,\n     |     width = 40,\n     |     height = 50;\n     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n    \\*/\n    R.format = function (token, params) {\n        var args = R.is(params, array) ? [0][concat](params) : arguments;\n        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n            return args[++i] == null ? E : args[i];\n        }));\n        return token || E;\n    };\n    /*\\\n     * Raphael.fullfill\n     [ method ]\n     **\n     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n     **\n     > Parameters\n     **\n     - token (string) string to format\n     - json (object) object which properties will be used as a replacement\n     = (string) formated string\n     > Usage\n     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n     |     x: 10,\n     |     y: 20,\n     |     dim: {\n     |         width: 40,\n     |         height: 50,\n     |         \"negative width\": -40\n     |     }\n     | }));\n    \\*/\n    R.fullfill = (function () {\n        var tokenRegex = /\\{([^\\}]+)\\}/g,\n            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n            replacer = function (all, key, obj) {\n                var res = obj;\n                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                    name = name || quotedName;\n                    if (res) {\n                        if (name in res) {\n                            res = res[name];\n                        }\n                        typeof res == \"function\" && isFunc && (res = res());\n                    }\n                });\n                res = (res == null || res == obj ? all : res) + \"\";\n                return res;\n            };\n        return function (str, obj) {\n            return String(str).replace(tokenRegex, function (all, key) {\n                return replacer(all, key, obj);\n            });\n        };\n    })();\n    /*\\\n     * Raphael.ninja\n     [ method ]\n     **\n     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n     * Beware, that in this case plugins could stop working, because they are depending on global variable existance.\n     **\n     = (object) Raphael object\n     > Usage\n     | (function (local_raphael) {\n     |     var paper = local_raphael(10, 10, 320, 200);\n     |     …\n     | })(Raphael.ninja());\n    \\*/\n    R.ninja = function () {\n        oldRaphael.was ? (g.win.Raphael = oldRaphael.is) : delete Raphael;\n        return R;\n    };\n    /*\\\n     * Raphael.st\n     [ property (object) ]\n     **\n     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n     * you added, so you will be able to call the same method on sets too.\n     **\n     * See also @Raphael.el.\n     > Usage\n     | Raphael.el.red = function () {\n     |     this.attr({fill: \"#f00\"});\n     | };\n     | Raphael.st.red = function () {\n     |     this.forEach(function (el) {\n     |         el.red();\n     |     });\n     | };\n     | // then use it\n     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n    \\*/\n    R.st = setproto;\n\n    eve.on(\"raphael.DOMload\", function () {\n        loaded = true;\n    });\n\n    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n    (function (doc, loaded, f) {\n        if (doc.readyState == null && doc.addEventListener){\n            doc.addEventListener(loaded, f = function () {\n                doc.removeEventListener(loaded, f, false);\n                doc.readyState = \"complete\";\n            }, false);\n            doc.readyState = \"loading\";\n        }\n        function isLoaded() {\n            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n        }\n        isLoaded();\n    })(document, \"DOMContentLoaded\");\n\n// ┌─────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël - JavaScript Vector Library                                 │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ SVG Module                                                          │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\\\\n// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\\\\n// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\\\\n// └─────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function(){\n    if (!R.svg) {\n        return;\n    }\n    var has = \"hasOwnProperty\",\n        Str = String,\n        toFloat = parseFloat,\n        toInt = parseInt,\n        math = Math,\n        mmax = math.max,\n        abs = math.abs,\n        pow = math.pow,\n        separator = /[, ]+/,\n        eve = R.eve,\n        E = \"\",\n        S = \" \";\n    var xlink = \"http://www.w3.org/1999/xlink\",\n        markers = {\n            block: \"M5,0 0,2.5 5,5z\",\n            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n            open: \"M6,1 1,3.5 6,6\",\n            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n        },\n        markerCounter = {};\n    R.toString = function () {\n        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n    };\n    var $ = function (el, attr) {\n        if (attr) {\n            if (typeof el == \"string\") {\n                el = $(el);\n            }\n            for (var key in attr) if (attr[has](key)) {\n                if (key.substring(0, 6) == \"xlink:\") {\n                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n                } else {\n                    el.setAttribute(key, Str(attr[key]));\n                }\n            }\n        } else {\n            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n        }\n        return el;\n    },\n    addGradientFill = function (element, gradient) {\n        var type = \"linear\",\n            id = element.id + gradient,\n            fx = .5, fy = .5,\n            o = element.node,\n            SVG = element.paper,\n            s = o.style,\n            el = R._g.doc.getElementById(id);\n        if (!el) {\n            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n                type = \"radial\";\n                if (_fx && _fy) {\n                    fx = toFloat(_fx);\n                    fy = toFloat(_fy);\n                    var dir = ((fy > .5) * 2 - 1);\n                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n                        fy != .5 &&\n                        (fy = fy.toFixed(5) - 1e-5 * dir);\n                }\n                return E;\n            });\n            gradient = gradient.split(/\\s*\\-\\s*/);\n            if (type == \"linear\") {\n                var angle = gradient.shift();\n                angle = -toFloat(angle);\n                if (isNaN(angle)) {\n                    return null;\n                }\n                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n                vector[2] *= max;\n                vector[3] *= max;\n                if (vector[2] < 0) {\n                    vector[0] = -vector[2];\n                    vector[2] = 0;\n                }\n                if (vector[3] < 0) {\n                    vector[1] = -vector[3];\n                    vector[3] = 0;\n                }\n            }\n            var dots = R._parseDots(gradient);\n            if (!dots) {\n                return null;\n            }\n            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n            if (element.gradient && id != element.gradient.id) {\n                SVG.defs.removeChild(element.gradient);\n                delete element.gradient;\n            }\n\n            if (!element.gradient) {\n                el = $(type + \"Gradient\", {id: id});\n                element.gradient = el;\n                $(el, type == \"radial\" ? {\n                    fx: fx,\n                    fy: fy\n                } : {\n                    x1: vector[0],\n                    y1: vector[1],\n                    x2: vector[2],\n                    y2: vector[3],\n                    gradientTransform: element.matrix.invert()\n                });\n                SVG.defs.appendChild(el);\n                for (var i = 0, ii = dots.length; i < ii; i++) {\n                    el.appendChild($(\"stop\", {\n                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n                        \"stop-color\": dots[i].color || \"#fff\"\n                    }));\n                }\n            }\n        }\n        $(o, {\n            fill: \"url('\" + document.location + \"#\" + id + \"')\",\n            opacity: 1,\n            \"fill-opacity\": 1\n        });\n        s.fill = E;\n        s.opacity = 1;\n        s.fillOpacity = 1;\n        return 1;\n    },\n    updatePosition = function (o) {\n        var bbox = o.getBBox(1);\n        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});\n    },\n    addArrow = function (o, value, isEnd) {\n        if (o.type == \"path\") {\n            var values = Str(value).toLowerCase().split(\"-\"),\n                p = o.paper,\n                se = isEnd ? \"end\" : \"start\",\n                node = o.node,\n                attrs = o.attrs,\n                stroke = attrs[\"stroke-width\"],\n                i = values.length,\n                type = \"classic\",\n                from,\n                to,\n                dx,\n                refX,\n                attr,\n                w = 3,\n                h = 3,\n                t = 5;\n            while (i--) {\n                switch (values[i]) {\n                    case \"block\":\n                    case \"classic\":\n                    case \"oval\":\n                    case \"diamond\":\n                    case \"open\":\n                    case \"none\":\n                        type = values[i];\n                        break;\n                    case \"wide\": h = 5; break;\n                    case \"narrow\": h = 2; break;\n                    case \"long\": w = 5; break;\n                    case \"short\": w = 2; break;\n                }\n            }\n            if (type == \"open\") {\n                w += 2;\n                h += 2;\n                t += 2;\n                dx = 1;\n                refX = isEnd ? 4 : 1;\n                attr = {\n                    fill: \"none\",\n                    stroke: attrs.stroke\n                };\n            } else {\n                refX = dx = w / 2;\n                attr = {\n                    fill: attrs.stroke,\n                    stroke: \"none\"\n                };\n            }\n            if (o._.arrows) {\n                if (isEnd) {\n                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n                } else {\n                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n                }\n            } else {\n                o._.arrows = {};\n            }\n            if (type != \"none\") {\n                var pathId = \"raphael-marker-\" + type,\n                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n                if (!R._g.doc.getElementById(pathId)) {\n                    p.defs.appendChild($($(\"path\"), {\n                        \"stroke-linecap\": \"round\",\n                        d: markers[type],\n                        id: pathId\n                    }));\n                    markerCounter[pathId] = 1;\n                } else {\n                    markerCounter[pathId]++;\n                }\n                var marker = R._g.doc.getElementById(markerId),\n                    use;\n                if (!marker) {\n                    marker = $($(\"marker\"), {\n                        id: markerId,\n                        markerHeight: h,\n                        markerWidth: w,\n                        orient: \"auto\",\n                        refX: refX,\n                        refY: h / 2\n                    });\n                    use = $($(\"use\"), {\n                        \"xlink:href\": \"#\" + pathId,\n                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n                    });\n                    marker.appendChild(use);\n                    p.defs.appendChild(marker);\n                    markerCounter[markerId] = 1;\n                } else {\n                    markerCounter[markerId]++;\n                    use = marker.getElementsByTagName(\"use\")[0];\n                }\n                $(use, attr);\n                var delta = dx * (type != \"diamond\" && type != \"oval\");\n                if (isEnd) {\n                    from = o._.arrows.startdx * stroke || 0;\n                    to = R.getTotalLength(attrs.path) - delta * stroke;\n                } else {\n                    from = delta * stroke;\n                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n                }\n                attr = {};\n                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n                if (to || from) {\n                    attr.d = R.getSubpath(attrs.path, from, to);\n                }\n                $(node, attr);\n                o._.arrows[se + \"Path\"] = pathId;\n                o._.arrows[se + \"Marker\"] = markerId;\n                o._.arrows[se + \"dx\"] = delta;\n                o._.arrows[se + \"Type\"] = type;\n                o._.arrows[se + \"String\"] = value;\n            } else {\n                if (isEnd) {\n                    from = o._.arrows.startdx * stroke || 0;\n                    to = R.getTotalLength(attrs.path) - from;\n                } else {\n                    from = 0;\n                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n                }\n                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n                delete o._.arrows[se + \"Path\"];\n                delete o._.arrows[se + \"Marker\"];\n                delete o._.arrows[se + \"dx\"];\n                delete o._.arrows[se + \"Type\"];\n                delete o._.arrows[se + \"String\"];\n            }\n            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n                var item = R._g.doc.getElementById(attr);\n                item && item.parentNode.removeChild(item);\n            }\n        }\n    },\n    dasharray = {\n        \"\": [0],\n        \"none\": [0],\n        \"-\": [3, 1],\n        \".\": [1, 1],\n        \"-.\": [3, 1, 1, 1],\n        \"-..\": [3, 1, 1, 1, 1, 1],\n        \". \": [1, 3],\n        \"- \": [4, 3],\n        \"--\": [8, 3],\n        \"- .\": [4, 3, 1, 3],\n        \"--.\": [8, 3, 1, 3],\n        \"--..\": [8, 3, 1, 3, 1, 3]\n    },\n    addDashes = function (o, value, params) {\n        value = dasharray[Str(value).toLowerCase()];\n        if (value) {\n            var width = o.attrs[\"stroke-width\"] || \"1\",\n                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n                dashes = [],\n                i = value.length;\n            while (i--) {\n                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n            }\n            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});\n        }\n    },\n    setFillAndStroke = function (o, params) {\n        var node = o.node,\n            attrs = o.attrs,\n            vis = node.style.visibility;\n        node.style.visibility = \"hidden\";\n        for (var att in params) {\n            if (params[has](att)) {\n                if (!R._availableAttrs[has](att)) {\n                    continue;\n                }\n                var value = params[att];\n                attrs[att] = value;\n                switch (att) {\n                    case \"blur\":\n                        o.blur(value);\n                        break;\n                    case \"title\":\n                        var title = node.getElementsByTagName(\"title\");\n\n                        // Use the existing <title>.\n                        if (title.length && (title = title[0])) {\n                          title.firstChild.nodeValue = value;\n                        } else {\n                          title = $(\"title\");\n                          var val = R._g.doc.createTextNode(value);\n                          title.appendChild(val);\n                          node.appendChild(title);\n                        }\n                        break;\n                    case \"href\":\n                    case \"target\":\n                        var pn = node.parentNode;\n                        if (pn.tagName.toLowerCase() != \"a\") {\n                            var hl = $(\"a\");\n                            pn.insertBefore(hl, node);\n                            hl.appendChild(node);\n                            pn = hl;\n                        }\n                        if (att == \"target\") {\n                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n                        } else {\n                            pn.setAttributeNS(xlink, att, value);\n                        }\n                        break;\n                    case \"cursor\":\n                        node.style.cursor = value;\n                        break;\n                    case \"transform\":\n                        o.transform(value);\n                        break;\n                    case \"arrow-start\":\n                        addArrow(o, value);\n                        break;\n                    case \"arrow-end\":\n                        addArrow(o, value, 1);\n                        break;\n                    case \"clip-rect\":\n                        var rect = Str(value).split(separator);\n                        if (rect.length == 4) {\n                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n                            var el = $(\"clipPath\"),\n                                rc = $(\"rect\");\n                            el.id = R.createUUID();\n                            $(rc, {\n                                x: rect[0],\n                                y: rect[1],\n                                width: rect[2],\n                                height: rect[3]\n                            });\n                            el.appendChild(rc);\n                            o.paper.defs.appendChild(el);\n                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});\n                            o.clip = rc;\n                        }\n                        if (!value) {\n                            var path = node.getAttribute(\"clip-path\");\n                            if (path) {\n                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n                                clip && clip.parentNode.removeChild(clip);\n                                $(node, {\"clip-path\": E});\n                                delete o.clip;\n                            }\n                        }\n                    break;\n                    case \"path\":\n                        if (o.type == \"path\") {\n                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});\n                            o._.dirty = 1;\n                            if (o._.arrows) {\n                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n                            }\n                        }\n                        break;\n                    case \"width\":\n                        node.setAttribute(att, value);\n                        o._.dirty = 1;\n                        if (attrs.fx) {\n                            att = \"x\";\n                            value = attrs.x;\n                        } else {\n                            break;\n                        }\n                    case \"x\":\n                        if (attrs.fx) {\n                            value = -attrs.x - (attrs.width || 0);\n                        }\n                    case \"rx\":\n                        if (att == \"rx\" && o.type == \"rect\") {\n                            break;\n                        }\n                    case \"cx\":\n                        node.setAttribute(att, value);\n                        o.pattern && updatePosition(o);\n                        o._.dirty = 1;\n                        break;\n                    case \"height\":\n                        node.setAttribute(att, value);\n                        o._.dirty = 1;\n                        if (attrs.fy) {\n                            att = \"y\";\n                            value = attrs.y;\n                        } else {\n                            break;\n                        }\n                    case \"y\":\n                        if (attrs.fy) {\n                            value = -attrs.y - (attrs.height || 0);\n                        }\n                    case \"ry\":\n                        if (att == \"ry\" && o.type == \"rect\") {\n                            break;\n                        }\n                    case \"cy\":\n                        node.setAttribute(att, value);\n                        o.pattern && updatePosition(o);\n                        o._.dirty = 1;\n                        break;\n                    case \"r\":\n                        if (o.type == \"rect\") {\n                            $(node, {rx: value, ry: value});\n                        } else {\n                            node.setAttribute(att, value);\n                        }\n                        o._.dirty = 1;\n                        break;\n                    case \"src\":\n                        if (o.type == \"image\") {\n                            node.setAttributeNS(xlink, \"href\", value);\n                        }\n                        break;\n                    case \"stroke-width\":\n                        if (o._.sx != 1 || o._.sy != 1) {\n                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n                        }\n                        node.setAttribute(att, value);\n                        if (attrs[\"stroke-dasharray\"]) {\n                            addDashes(o, attrs[\"stroke-dasharray\"], params);\n                        }\n                        if (o._.arrows) {\n                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n                        }\n                        break;\n                    case \"stroke-dasharray\":\n                        addDashes(o, value, params);\n                        break;\n                    case \"fill\":\n                        var isURL = Str(value).match(R._ISURL);\n                        if (isURL) {\n                            el = $(\"pattern\");\n                            var ig = $(\"image\");\n                            el.id = R.createUUID();\n                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});\n                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});\n                            el.appendChild(ig);\n\n                            (function (el) {\n                                R._preload(isURL[1], function () {\n                                    var w = this.offsetWidth,\n                                        h = this.offsetHeight;\n                                    $(el, {width: w, height: h});\n                                    $(ig, {width: w, height: h});\n                                    o.paper.safari();\n                                });\n                            })(el);\n                            o.paper.defs.appendChild(el);\n                            $(node, {fill: \"url(#\" + el.id + \")\"});\n                            o.pattern = el;\n                            o.pattern && updatePosition(o);\n                            break;\n                        }\n                        var clr = R.getRGB(value);\n                        if (!clr.error) {\n                            delete params.gradient;\n                            delete attrs.gradient;\n                            !R.is(attrs.opacity, \"undefined\") &&\n                                R.is(params.opacity, \"undefined\") &&\n                                $(node, {opacity: attrs.opacity});\n                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&\n                                R.is(params[\"fill-opacity\"], \"undefined\") &&\n                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});\n                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n                                if (gradient) {\n                                    var stops = gradient.getElementsByTagName(\"stop\");\n                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n                                }\n                            }\n                            attrs.gradient = value;\n                            attrs.fill = \"none\";\n                            break;\n                        }\n                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n                    case \"stroke\":\n                        clr = R.getRGB(value);\n                        node.setAttribute(att, clr.hex);\n                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n                        if (att == \"stroke\" && o._.arrows) {\n                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n                        }\n                        break;\n                    case \"gradient\":\n                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n                        break;\n                    case \"opacity\":\n                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});\n                        }\n                        // fall\n                    case \"fill-opacity\":\n                        if (attrs.gradient) {\n                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n                            if (gradient) {\n                                stops = gradient.getElementsByTagName(\"stop\");\n                                $(stops[stops.length - 1], {\"stop-opacity\": value});\n                            }\n                            break;\n                        }\n                    default:\n                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n                            return w.substring(1).toUpperCase();\n                        });\n                        node.style[cssrule] = value;\n                        o._.dirty = 1;\n                        node.setAttribute(att, value);\n                        break;\n                }\n            }\n        }\n\n        tuneText(o, params);\n        node.style.visibility = vis;\n    },\n    leading = 1.2,\n    tuneText = function (el, params) {\n        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n            return;\n        }\n        var a = el.attrs,\n            node = el.node,\n            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n        if (params[has](\"text\")) {\n            a.text = params.text;\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var texts = Str(params.text).split(\"\\n\"),\n                tspans = [],\n                tspan;\n            for (var i = 0, ii = texts.length; i < ii; i++) {\n                tspan = $(\"tspan\");\n                i && $(tspan, {dy: fontSize * leading, x: a.x});\n                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n                node.appendChild(tspan);\n                tspans[i] = tspan;\n            }\n        } else {\n            tspans = node.getElementsByTagName(\"tspan\");\n            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n                $(tspans[i], {dy: fontSize * leading, x: a.x});\n            } else {\n                $(tspans[0], {dy: 0});\n            }\n        }\n        $(node, {x: a.x, y: a.y});\n        el._.dirty = 1;\n        var bb = el._getBBox(),\n            dif = a.y - (bb.y + bb.height / 2);\n        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});\n    },\n    getRealNode = function (node) {\n        if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n            return node.parentNode;\n        } else {\n            return node;\n        }\n    },\n    Element = function (node, svg) {\n        var X = 0,\n            Y = 0;\n        /*\\\n         * Element.node\n         [ property (object) ]\n         **\n         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n         **\n         * Note: Don’t mess with it.\n         > Usage\n         | // draw a circle at coordinate 10,10 with radius of 10\n         | var c = paper.circle(10, 10, 10);\n         | c.node.onclick = function () {\n         |     c.attr(\"fill\", \"red\");\n         | };\n        \\*/\n        this[0] = this.node = node;\n        /*\\\n         * Element.raphael\n         [ property (object) ]\n         **\n         * Internal reference to @Raphael object. In case it is not available.\n         > Usage\n         | Raphael.el.red = function () {\n         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n         |     hsb.h = 1;\n         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n         | }\n        \\*/\n        node.raphael = true;\n        /*\\\n         * Element.id\n         [ property (number) ]\n         **\n         * Unique id of the element. Especially useful when you want to listen to events of the element,\n         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n        \\*/\n        this.id = R._oid++;\n        node.raphaelid = this.id;\n        this.matrix = R.matrix();\n        this.realPath = null;\n        /*\\\n         * Element.paper\n         [ property (object) ]\n         **\n         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n         > Usage\n         | Raphael.el.cross = function () {\n         |     this.attr({fill: \"red\"});\n         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n         |         .attr({stroke: \"red\"});\n         | }\n        \\*/\n        this.paper = svg;\n        this.attrs = this.attrs || {};\n        this._ = {\n            transform: [],\n            sx: 1,\n            sy: 1,\n            deg: 0,\n            dx: 0,\n            dy: 0,\n            dirty: 1\n        };\n        !svg.bottom && (svg.bottom = this);\n        /*\\\n         * Element.prev\n         [ property (object) ]\n         **\n         * Reference to the previous element in the hierarchy.\n        \\*/\n        this.prev = svg.top;\n        svg.top && (svg.top.next = this);\n        svg.top = this;\n        /*\\\n         * Element.next\n         [ property (object) ]\n         **\n         * Reference to the next element in the hierarchy.\n        \\*/\n        this.next = null;\n    },\n    elproto = R.el;\n\n    Element.prototype = elproto;\n    elproto.constructor = Element;\n\n    R._engine.path = function (pathString, SVG) {\n        var el = $(\"path\");\n        SVG.canvas && SVG.canvas.appendChild(el);\n        var p = new Element(el, SVG);\n        p.type = \"path\";\n        setFillAndStroke(p, {\n            fill: \"none\",\n            stroke: \"#000\",\n            path: pathString\n        });\n        return p;\n    };\n    /*\\\n     * Element.rotate\n     [ method ]\n     **\n     * Deprecated! Use @Element.transform instead.\n     * Adds rotation by given angle around given point to the list of\n     * transformations of the element.\n     > Parameters\n     - deg (number) angle in degrees\n     - cx (number) #optional x coordinate of the centre of rotation\n     - cy (number) #optional y coordinate of the centre of rotation\n     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n     = (object) @Element\n    \\*/\n    elproto.rotate = function (deg, cx, cy) {\n        if (this.removed) {\n            return this;\n        }\n        deg = Str(deg).split(separator);\n        if (deg.length - 1) {\n            cx = toFloat(deg[1]);\n            cy = toFloat(deg[2]);\n        }\n        deg = toFloat(deg[0]);\n        (cy == null) && (cx = cy);\n        if (cx == null || cy == null) {\n            var bbox = this.getBBox(1);\n            cx = bbox.x + bbox.width / 2;\n            cy = bbox.y + bbox.height / 2;\n        }\n        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n        return this;\n    };\n    /*\\\n     * Element.scale\n     [ method ]\n     **\n     * Deprecated! Use @Element.transform instead.\n     * Adds scale by given amount relative to given point to the list of\n     * transformations of the element.\n     > Parameters\n     - sx (number) horisontal scale amount\n     - sy (number) vertical scale amount\n     - cx (number) #optional x coordinate of the centre of scale\n     - cy (number) #optional y coordinate of the centre of scale\n     * If cx & cy aren’t specified centre of the shape is used instead.\n     = (object) @Element\n    \\*/\n    elproto.scale = function (sx, sy, cx, cy) {\n        if (this.removed) {\n            return this;\n        }\n        sx = Str(sx).split(separator);\n        if (sx.length - 1) {\n            sy = toFloat(sx[1]);\n            cx = toFloat(sx[2]);\n            cy = toFloat(sx[3]);\n        }\n        sx = toFloat(sx[0]);\n        (sy == null) && (sy = sx);\n        (cy == null) && (cx = cy);\n        if (cx == null || cy == null) {\n            var bbox = this.getBBox(1);\n        }\n        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n        return this;\n    };\n    /*\\\n     * Element.translate\n     [ method ]\n     **\n     * Deprecated! Use @Element.transform instead.\n     * Adds translation by given amount to the list of transformations of the element.\n     > Parameters\n     - dx (number) horisontal shift\n     - dy (number) vertical shift\n     = (object) @Element\n    \\*/\n    elproto.translate = function (dx, dy) {\n        if (this.removed) {\n            return this;\n        }\n        dx = Str(dx).split(separator);\n        if (dx.length - 1) {\n            dy = toFloat(dx[1]);\n        }\n        dx = toFloat(dx[0]) || 0;\n        dy = +dy || 0;\n        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n        return this;\n    };\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Adds transformation to the element which is separate to other attributes,\n     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n     * of transformation string is similar to the path string syntax:\n     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n     * scale and `m` is for matrix.\n     *\n     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n     *\n     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n     * coordinates as optional parameters, the default is the centre point of the element.\n     * Matrix accepts six parameters.\n     > Usage\n     | var el = paper.rect(10, 20, 300, 200);\n     | // translate 100, 100, rotate 45°, translate -100, 0\n     | el.transform(\"t100,100r45t-100,0\");\n     | // if you want you can append or prepend transformations\n     | el.transform(\"...t50,50\");\n     | el.transform(\"s2...\");\n     | // or even wrap\n     | el.transform(\"t50,50...t-50-50\");\n     | // to reset transformation call method with empty string\n     | el.transform(\"\");\n     | // to get current value call it without parameters\n     | console.log(el.transform());\n     > Parameters\n     - tstr (string) #optional transformation string\n     * If tstr isn’t specified\n     = (string) current transformation string\n     * else\n     = (object) @Element\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            return _.transform;\n        }\n        R._extractTransform(this, tstr);\n\n        this.clip && $(this.clip, {transform: this.matrix.invert()});\n        this.pattern && updatePosition(this);\n        this.node && $(this.node, {transform: this.matrix});\n\n        if (_.sx != 1 || _.sy != 1) {\n            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n            this.attr({\"stroke-width\": sw});\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.hide\n     [ method ]\n     **\n     * Makes element invisible. See @Element.show.\n     = (object) @Element\n    \\*/\n    elproto.hide = function () {\n        !this.removed && this.paper.safari(this.node.style.display = \"none\");\n        return this;\n    };\n    /*\\\n     * Element.show\n     [ method ]\n     **\n     * Makes element visible. See @Element.hide.\n     = (object) @Element\n    \\*/\n    elproto.show = function () {\n        !this.removed && this.paper.safari(this.node.style.display = \"\");\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the paper.\n    \\*/\n    elproto.remove = function () {\n        var node = getRealNode(this.node);\n        if (this.removed || !node.parentNode) {\n            return;\n        }\n        var paper = this.paper;\n        paper.__set__ && paper.__set__.exclude(this);\n        eve.unbind(\"raphael.*.*.\" + this.id);\n        if (this.gradient) {\n            paper.defs.removeChild(this.gradient);\n        }\n        R._tear(this, paper);\n\n        node.parentNode.removeChild(node);\n\n        // Remove custom data for element\n        this.removeData();\n\n        for (var i in this) {\n            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n        }\n        this.removed = true;\n    };\n    elproto._getBBox = function () {\n        if (this.node.style.display == \"none\") {\n            this.show();\n            var hide = true;\n        }\n        var canvasHidden = false,\n            containerStyle;\n        if (this.paper.canvas.parentElement) {\n          containerStyle = this.paper.canvas.parentElement.style;\n        } //IE10+ can't find parentElement\n        else if (this.paper.canvas.parentNode) {\n          containerStyle = this.paper.canvas.parentNode.style;\n        }\n\n        if(containerStyle && containerStyle.display == \"none\") {\n          canvasHidden = true;\n          containerStyle.display = \"\";\n        }\n        var bbox = {};\n        try {\n            bbox = this.node.getBBox();\n        } catch(e) {\n            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n            bbox = {\n                x: this.node.clientLeft,\n                y: this.node.clientTop,\n                width: this.node.clientWidth,\n                height: this.node.clientHeight\n            }\n        } finally {\n            bbox = bbox || {};\n            if(canvasHidden){\n              containerStyle.display = \"none\";\n            }\n        }\n        hide && this.hide();\n        return bbox;\n    };\n    /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Sets the attributes of the element.\n     > Parameters\n     - attrName (string) attribute’s name\n     - value (string) value\n     * or\n     - params (object) object of name/value pairs\n     * or\n     - attrName (string) attribute’s name\n     * or\n     - attrNames (array) in this case method returns array of current values for given attribute names\n     = (object) @Element if attrsName & value or params are passed in.\n     = (...) value of the attribute if only attrsName is passed in.\n     = (array) array of values of the attribute if attrsNames is passed in.\n     = (object) object of attributes if nothing is passed in.\n     > Possible parameters\n     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n     o clip-rect (string) comma or space separated values: x, y, width and height\n     o cursor (string) CSS type of the cursor\n     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n     o fill (string) colour, gradient or image\n     o fill-opacity (number)\n     o font (string)\n     o font-family (string)\n     o font-size (number) font size in pixels\n     o font-weight (string)\n     o height (number)\n     o href (string) URL, if specified element behaves as hyperlink\n     o opacity (number)\n     o path (string) SVG path string format\n     o r (number) radius of the circle, ellipse or rounded corner on the rect\n     o rx (number) horisontal radius of the ellipse\n     o ry (number) vertical radius of the ellipse\n     o src (string) image URL, only works for @Element.image element\n     o stroke (string) stroke colour\n     o stroke-dasharray (string) [“”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n     o stroke-miterlimit (number)\n     o stroke-opacity (number)\n     o stroke-width (number) stroke width in pixels, default is '1'\n     o target (string) used with href\n     o text (string) contents of the text element. Use `\\n` for multiline text\n     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n     o title (string) will create tooltip with a given text\n     o transform (string) see @Element.transform\n     o width (number)\n     o x (number)\n     o y (number)\n     > Gradients\n     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n     *\n     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n     > Path String\n     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n     > Colour Parsing\n     # <ul>\n     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n     # </ul>\n    \\*/\n    elproto.attr = function (name, value) {\n        if (this.removed) {\n            return this;\n        }\n        if (name == null) {\n            var res = {};\n            for (var a in this.attrs) if (this.attrs[has](a)) {\n                res[a] = this.attrs[a];\n            }\n            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n            res.transform = this._.transform;\n            return res;\n        }\n        if (value == null && R.is(name, \"string\")) {\n            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n                return this.attrs.gradient;\n            }\n            if (name == \"transform\") {\n                return this._.transform;\n            }\n            var names = name.split(separator),\n                out = {};\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                name = names[i];\n                if (name in this.attrs) {\n                    out[name] = this.attrs[name];\n                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n                    out[name] = this.paper.customAttributes[name].def;\n                } else {\n                    out[name] = R._availableAttrs[name];\n                }\n            }\n            return ii - 1 ? out : out[names[0]];\n        }\n        if (value == null && R.is(name, \"array\")) {\n            out = {};\n            for (i = 0, ii = name.length; i < ii; i++) {\n                out[name[i]] = this.attr(name[i]);\n            }\n            return out;\n        }\n        if (value != null) {\n            var params = {};\n            params[name] = value;\n        } else if (name != null && R.is(name, \"object\")) {\n            params = name;\n        }\n        for (var key in params) {\n            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n        }\n        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n            this.attrs[key] = params[key];\n            for (var subkey in par) if (par[has](subkey)) {\n                params[subkey] = par[subkey];\n            }\n        }\n        setFillAndStroke(this, params);\n        return this;\n    };\n    /*\\\n     * Element.toFront\n     [ method ]\n     **\n     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n     = (object) @Element\n    \\*/\n    elproto.toFront = function () {\n        if (this.removed) {\n            return this;\n        }\n        var node = getRealNode(this.node);\n        node.parentNode.appendChild(node);\n        var svg = this.paper;\n        svg.top != this && R._tofront(this, svg);\n        return this;\n    };\n    /*\\\n     * Element.toBack\n     [ method ]\n     **\n     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n     = (object) @Element\n    \\*/\n    elproto.toBack = function () {\n        if (this.removed) {\n            return this;\n        }\n        var node = getRealNode(this.node);\n        var parentNode = node.parentNode;\n        parentNode.insertBefore(node, parentNode.firstChild);\n        R._toback(this, this.paper);\n        var svg = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts current object after the given one.\n     = (object) @Element\n    \\*/\n    elproto.insertAfter = function (element) {\n        if (this.removed || !element) {\n            return this;\n        }\n\n        var node = getRealNode(this.node);\n        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n        if (afterNode.nextSibling) {\n            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n        } else {\n            afterNode.parentNode.appendChild(node);\n        }\n        R._insertafter(this, element, this.paper);\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts current object before the given one.\n     = (object) @Element\n    \\*/\n    elproto.insertBefore = function (element) {\n        if (this.removed || !element) {\n            return this;\n        }\n\n        var node = getRealNode(this.node);\n        var beforeNode = getRealNode(element.node || element[0].node);\n        beforeNode.parentNode.insertBefore(node, beforeNode);\n        R._insertbefore(this, element, this.paper);\n        return this;\n    };\n    elproto.blur = function (size) {\n        // Experimental. No Safari support. Use it on your own risk.\n        var t = this;\n        if (+size !== 0) {\n            var fltr = $(\"filter\"),\n                blur = $(\"feGaussianBlur\");\n            t.attrs.blur = size;\n            fltr.id = R.createUUID();\n            $(blur, {stdDeviation: +size || 1.5});\n            fltr.appendChild(blur);\n            t.paper.defs.appendChild(fltr);\n            t._blur = fltr;\n            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});\n        } else {\n            if (t._blur) {\n                t._blur.parentNode.removeChild(t._blur);\n                delete t._blur;\n                delete t.attrs.blur;\n            }\n            t.node.removeAttribute(\"filter\");\n        }\n        return t;\n    };\n    R._engine.circle = function (svg, x, y, r) {\n        var el = $(\"circle\");\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};\n        res.type = \"circle\";\n        $(el, res.attrs);\n        return res;\n    };\n    R._engine.rect = function (svg, x, y, w, h, r) {\n        var el = $(\"rect\");\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n        res.type = \"rect\";\n        $(el, res.attrs);\n        return res;\n    };\n    R._engine.ellipse = function (svg, x, y, rx, ry) {\n        var el = $(\"ellipse\");\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};\n        res.type = \"ellipse\";\n        $(el, res.attrs);\n        return res;\n    };\n    R._engine.image = function (svg, src, x, y, w, h) {\n        var el = $(\"image\");\n        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});\n        el.setAttributeNS(xlink, \"href\", src);\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n        res.type = \"image\";\n        return res;\n    };\n    R._engine.text = function (svg, x, y, text) {\n        var el = $(\"text\");\n        svg.canvas && svg.canvas.appendChild(el);\n        var res = new Element(el, svg);\n        res.attrs = {\n            x: x,\n            y: y,\n            \"text-anchor\": \"middle\",\n            text: text,\n            \"font-family\": R._availableAttrs[\"font-family\"],\n            \"font-size\": R._availableAttrs[\"font-size\"],\n            stroke: \"none\",\n            fill: \"#000\"\n        };\n        res.type = \"text\";\n        setFillAndStroke(res, res.attrs);\n        return res;\n    };\n    R._engine.setSize = function (width, height) {\n        this.width = width || this.width;\n        this.height = height || this.height;\n        this.canvas.setAttribute(\"width\", this.width);\n        this.canvas.setAttribute(\"height\", this.height);\n        if (this._viewBox) {\n            this.setViewBox.apply(this, this._viewBox);\n        }\n        return this;\n    };\n    R._engine.create = function () {\n        var con = R._getContainer.apply(0, arguments),\n            container = con && con.container,\n            x = con.x,\n            y = con.y,\n            width = con.width,\n            height = con.height;\n        if (!container) {\n            throw new Error(\"SVG container not found.\");\n        }\n        var cnvs = $(\"svg\"),\n            css = \"overflow:hidden;\",\n            isFloating;\n        x = x || 0;\n        y = y || 0;\n        width = width || 512;\n        height = height || 342;\n        $(cnvs, {\n            height: height,\n            version: 1.1,\n            width: width,\n            xmlns: \"http://www.w3.org/2000/svg\",\n            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n        });\n        if (container == 1) {\n            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n            R._g.doc.body.appendChild(cnvs);\n            isFloating = 1;\n        } else {\n            cnvs.style.cssText = css + \"position:relative\";\n            if (container.firstChild) {\n                container.insertBefore(cnvs, container.firstChild);\n            } else {\n                container.appendChild(cnvs);\n            }\n        }\n        container = new R._Paper;\n        container.width = width;\n        container.height = height;\n        container.canvas = cnvs;\n        container.clear();\n        container._left = container._top = 0;\n        isFloating && (container.renderfix = function () {});\n        container.renderfix();\n        return container;\n    };\n    R._engine.setViewBox = function (x, y, w, h, fit) {\n        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n        var paperSize = this.getSize(),\n            size = mmax(w / paperSize.width, h / paperSize.height),\n            top = this.top,\n            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n            vb,\n            sw;\n        if (x == null) {\n            if (this._vbSize) {\n                size = 1;\n            }\n            delete this._vbSize;\n            vb = \"0 0 \" + this.width + S + this.height;\n        } else {\n            this._vbSize = size;\n            vb = x + S + y + S + w + S + h;\n        }\n        $(this.canvas, {\n            viewBox: vb,\n            preserveAspectRatio: aspectRatio\n        });\n        while (size && top) {\n            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n            top.attr({\"stroke-width\": sw});\n            top._.dirty = 1;\n            top._.dirtyT = 1;\n            top = top.prev;\n        }\n        this._viewBox = [x, y, w, h, !!fit];\n        return this;\n    };\n    /*\\\n     * Paper.renderfix\n     [ method ]\n     **\n     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependant\n     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n     * This method fixes the issue.\n     **\n       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n    \\*/\n    R.prototype.renderfix = function () {\n        var cnvs = this.canvas,\n            s = cnvs.style,\n            pos;\n        try {\n            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n        } catch (e) {\n            pos = cnvs.createSVGMatrix();\n        }\n        var left = -pos.e % 1,\n            top = -pos.f % 1;\n        if (left || top) {\n            if (left) {\n                this._left = (this._left + left) % 1;\n                s.left = this._left + \"px\";\n            }\n            if (top) {\n                this._top = (this._top + top) % 1;\n                s.top = this._top + \"px\";\n            }\n        }\n    };\n    /*\\\n     * Paper.clear\n     [ method ]\n     **\n     * Clears the paper, i.e. removes all the elements.\n    \\*/\n    R.prototype.clear = function () {\n        R.eve(\"raphael.clear\", this);\n        var c = this.canvas;\n        while (c.firstChild) {\n            c.removeChild(c.firstChild);\n        }\n        this.bottom = this.top = null;\n        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n        c.appendChild(this.desc);\n        c.appendChild(this.defs = $(\"defs\"));\n    };\n    /*\\\n     * Paper.remove\n     [ method ]\n     **\n     * Removes the paper from the DOM.\n    \\*/\n    R.prototype.remove = function () {\n        eve(\"raphael.remove\", this);\n        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n        for (var i in this) {\n            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n        }\n    };\n    var setproto = R.st;\n    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n        setproto[method] = (function (methodname) {\n            return function () {\n                var arg = arguments;\n                return this.forEach(function (el) {\n                    el[methodname].apply(el, arg);\n                });\n            };\n        })(method);\n    }\n})();\n\n// ┌─────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël - JavaScript Vector Library                                 │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ VML Module                                                          │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\\\\n// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\\\\n// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\\\\n// └─────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function(){\n    if (!R.vml) {\n        return;\n    }\n    var has = \"hasOwnProperty\",\n        Str = String,\n        toFloat = parseFloat,\n        math = Math,\n        round = math.round,\n        mmax = math.max,\n        mmin = math.min,\n        abs = math.abs,\n        fillString = \"fill\",\n        separator = /[, ]+/,\n        eve = R.eve,\n        ms = \" progid:DXImageTransform.Microsoft\",\n        S = \" \",\n        E = \"\",\n        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},\n        bites = /([clmz]),?([^clmz]*)/gi,\n        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n        val = /-?[^,\\s-]+/g,\n        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n        zoom = 21600,\n        pathTypes = {path: 1, rect: 1, image: 1},\n        ovalTypes = {circle: 1, ellipse: 1},\n        path2vml = function (path) {\n            var total =  /[ahqstv]/ig,\n                command = R._pathToAbsolute;\n            Str(path).match(total) && (command = R._path2curve);\n            total = /[clmz]/g;\n            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n                var res = Str(path).replace(bites, function (all, command, args) {\n                    var vals = [],\n                        isMove = command.toLowerCase() == \"m\",\n                        res = map[command];\n                    args.replace(val, function (value) {\n                        if (isMove && vals.length == 2) {\n                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n                            vals = [];\n                        }\n                        vals.push(round(value * zoom));\n                    });\n                    return res + vals;\n                });\n                return res;\n            }\n            var pa = command(path), p, r;\n            res = [];\n            for (var i = 0, ii = pa.length; i < ii; i++) {\n                p = pa[i];\n                r = pa[i][0].toLowerCase();\n                r == \"z\" && (r = \"x\");\n                for (var j = 1, jj = p.length; j < jj; j++) {\n                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n                }\n                res.push(r);\n            }\n            return res.join(S);\n        },\n        compensation = function (deg, dx, dy) {\n            var m = R.matrix();\n            m.rotate(-deg, .5, .5);\n            return {\n                dx: m.x(dx, dy),\n                dy: m.y(dx, dy)\n            };\n        },\n        setCoords = function (p, sx, sy, dx, dy, deg) {\n            var _ = p._,\n                m = p.matrix,\n                fillpos = _.fillpos,\n                o = p.node,\n                s = o.style,\n                y = 1,\n                flip = \"\",\n                dxdy,\n                kx = zoom / sx,\n                ky = zoom / sy;\n            s.visibility = \"hidden\";\n            if (!sx || !sy) {\n                return;\n            }\n            o.coordsize = abs(kx) + S + abs(ky);\n            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n            if (deg) {\n                var c = compensation(deg, dx, dy);\n                dx = c.dx;\n                dy = c.dy;\n            }\n            sx < 0 && (flip += \"x\");\n            sy < 0 && (flip += \" y\") && (y = -1);\n            s.flip = flip;\n            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n            if (fillpos || _.fillsize) {\n                var fill = o.getElementsByTagName(fillString);\n                fill = fill && fill[0];\n                o.removeChild(fill);\n                if (fillpos) {\n                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n                    fill.position = c.dx * y + S + c.dy * y;\n                }\n                if (_.fillsize) {\n                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n                }\n                o.appendChild(fill);\n            }\n            s.visibility = \"visible\";\n        };\n    R.toString = function () {\n        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n    };\n    var addArrow = function (o, value, isEnd) {\n        var values = Str(value).toLowerCase().split(\"-\"),\n            se = isEnd ? \"end\" : \"start\",\n            i = values.length,\n            type = \"classic\",\n            w = \"medium\",\n            h = \"medium\";\n        while (i--) {\n            switch (values[i]) {\n                case \"block\":\n                case \"classic\":\n                case \"oval\":\n                case \"diamond\":\n                case \"open\":\n                case \"none\":\n                    type = values[i];\n                    break;\n                case \"wide\":\n                case \"narrow\": h = values[i]; break;\n                case \"long\":\n                case \"short\": w = values[i]; break;\n            }\n        }\n        var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n        stroke[se + \"arrow\"] = type;\n        stroke[se + \"arrowlength\"] = w;\n        stroke[se + \"arrowwidth\"] = h;\n    },\n    setFillAndStroke = function (o, params) {\n        // o.paper.canvas.style.display = \"none\";\n        o.attrs = o.attrs || {};\n        var node = o.node,\n            a = o.attrs,\n            s = node.style,\n            xy,\n            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n            res = o;\n\n\n        for (var par in params) if (params[has](par)) {\n            a[par] = params[par];\n        }\n        if (newpath) {\n            a.path = R._getPath[o.type](o);\n            o._.dirty = 1;\n        }\n        params.href && (node.href = params.href);\n        params.title && (node.title = params.title);\n        params.target && (node.target = params.target);\n        params.cursor && (s.cursor = params.cursor);\n        \"blur\" in params && o.blur(params.blur);\n        if (params.path && o.type == \"path\" || newpath) {\n            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n            o._.dirty = 1;\n            if (o.type == \"image\") {\n                o._.fillpos = [a.x, a.y];\n                o._.fillsize = [a.width, a.height];\n                setCoords(o, 1, 1, 0, 0, 0);\n            }\n        }\n        \"transform\" in params && o.transform(params.transform);\n        if (isOval) {\n            var cx = +a.cx,\n                cy = +a.cy,\n                rx = +a.rx || +a.r || 0,\n                ry = +a.ry || +a.r || 0;\n            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n            o._.dirty = 1;\n        }\n        if (\"clip-rect\" in params) {\n            var rect = Str(params[\"clip-rect\"]).split(separator);\n            if (rect.length == 4) {\n                rect[2] = +rect[2] + (+rect[0]);\n                rect[3] = +rect[3] + (+rect[1]);\n                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n                    dstyle = div.style;\n                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n                if (!node.clipRect) {\n                    dstyle.position = \"absolute\";\n                    dstyle.top = 0;\n                    dstyle.left = 0;\n                    dstyle.width = o.paper.width + \"px\";\n                    dstyle.height = o.paper.height + \"px\";\n                    node.parentNode.insertBefore(div, node);\n                    div.appendChild(node);\n                    node.clipRect = div;\n                }\n            }\n            if (!params[\"clip-rect\"]) {\n                node.clipRect && (node.clipRect.style.clip = \"auto\");\n            }\n        }\n        if (o.textpath) {\n            var textpathStyle = o.textpath.style;\n            params.font && (textpathStyle.font = params.font);\n            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n        }\n        if (\"arrow-start\" in params) {\n            addArrow(res, params[\"arrow-start\"]);\n        }\n        if (\"arrow-end\" in params) {\n            addArrow(res, params[\"arrow-end\"], 1);\n        }\n        if (params.opacity != null || \n            params[\"stroke-width\"] != null ||\n            params.fill != null ||\n            params.src != null ||\n            params.stroke != null ||\n            params[\"stroke-width\"] != null ||\n            params[\"stroke-opacity\"] != null ||\n            params[\"fill-opacity\"] != null ||\n            params[\"stroke-dasharray\"] != null ||\n            params[\"stroke-miterlimit\"] != null ||\n            params[\"stroke-linejoin\"] != null ||\n            params[\"stroke-linecap\"] != null) {\n            var fill = node.getElementsByTagName(fillString),\n                newfill = false;\n            fill = fill && fill[0];\n            !fill && (newfill = fill = createNode(fillString));\n            if (o.type == \"image\" && params.src) {\n                fill.src = params.src;\n            }\n            params.fill && (fill.on = true);\n            if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n                fill.on = false;\n            }\n            if (fill.on && params.fill) {\n                var isURL = Str(params.fill).match(R._ISURL);\n                if (isURL) {\n                    fill.parentNode == node && node.removeChild(fill);\n                    fill.rotate = true;\n                    fill.src = isURL[1];\n                    fill.type = \"tile\";\n                    var bbox = o.getBBox(1);\n                    fill.position = bbox.x + S + bbox.y;\n                    o._.fillpos = [bbox.x, bbox.y];\n\n                    R._preload(isURL[1], function () {\n                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n                    });\n                } else {\n                    fill.color = R.getRGB(params.fill).hex;\n                    fill.src = E;\n                    fill.type = \"solid\";\n                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n                        a.fill = \"none\";\n                        a.gradient = params.fill;\n                        fill.rotate = false;\n                    }\n                }\n            }\n            if (\"fill-opacity\" in params || \"opacity\" in params) {\n                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n                opacity = mmin(mmax(opacity, 0), 1);\n                fill.opacity = opacity;\n                if (fill.src) {\n                    fill.color = \"none\";\n                }\n            }\n            node.appendChild(fill);\n            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),\n            newstroke = false;\n            !stroke && (newstroke = stroke = createNode(\"stroke\"));\n            if ((params.stroke && params.stroke != \"none\") ||\n                params[\"stroke-width\"] ||\n                params[\"stroke-opacity\"] != null ||\n                params[\"stroke-dasharray\"] ||\n                params[\"stroke-miterlimit\"] ||\n                params[\"stroke-linejoin\"] ||\n                params[\"stroke-linecap\"]) {\n                stroke.on = true;\n            }\n            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n            var strokeColor = R.getRGB(params.stroke);\n            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n            opacity = mmin(mmax(opacity, 0), 1);\n            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n            params[\"stroke-width\"] && (stroke.weight = width);\n            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n            stroke.opacity = opacity;\n        \n            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n            if (\"stroke-dasharray\" in params) {\n                var dasharray = {\n                    \"-\": \"shortdash\",\n                    \".\": \"shortdot\",\n                    \"-.\": \"shortdashdot\",\n                    \"-..\": \"shortdashdotdot\",\n                    \". \": \"dot\",\n                    \"- \": \"dash\",\n                    \"--\": \"longdash\",\n                    \"- .\": \"dashdot\",\n                    \"--.\": \"longdashdot\",\n                    \"--..\": \"longdashdotdot\"\n                };\n                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n            }\n            newstroke && node.appendChild(stroke);\n        }\n        if (res.type == \"text\") {\n            res.paper.canvas.style.display = E;\n            var span = res.paper.span,\n                m = 100,\n                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n            s = span.style;\n            a.font && (s.font = a.font);\n            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n            s.fontSize = fontSize * m + \"px\";\n            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n            var brect = span.getBoundingClientRect();\n            res.W = a.w = (brect.right - brect.left) / m;\n            res.H = a.h = (brect.bottom - brect.top) / m;\n            // res.paper.canvas.style.display = \"none\";\n            res.X = a.x;\n            res.Y = a.y + res.H / 2;\n\n            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n                res._.dirty = 1;\n                break;\n            }\n        \n            // text-anchor emulation\n            switch (a[\"text-anchor\"]) {\n                case \"start\":\n                    res.textpath.style[\"v-text-align\"] = \"left\";\n                    res.bbx = res.W / 2;\n                break;\n                case \"end\":\n                    res.textpath.style[\"v-text-align\"] = \"right\";\n                    res.bbx = -res.W / 2;\n                break;\n                default:\n                    res.textpath.style[\"v-text-align\"] = \"center\";\n                    res.bbx = 0;\n                break;\n            }\n            res.textpath.style[\"v-text-kern\"] = true;\n        }\n        // res.paper.canvas.style.display = E;\n    },\n    addGradientFill = function (o, gradient, fill) {\n        o.attrs = o.attrs || {};\n        var attrs = o.attrs,\n            pow = Math.pow,\n            opacity,\n            oindex,\n            type = \"linear\",\n            fxfy = \".5 .5\";\n        o.attrs.gradient = gradient;\n        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n            type = \"radial\";\n            if (fx && fy) {\n                fx = toFloat(fx);\n                fy = toFloat(fy);\n                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n                fxfy = fx + S + fy;\n            }\n            return E;\n        });\n        gradient = gradient.split(/\\s*\\-\\s*/);\n        if (type == \"linear\") {\n            var angle = gradient.shift();\n            angle = -toFloat(angle);\n            if (isNaN(angle)) {\n                return null;\n            }\n        }\n        var dots = R._parseDots(gradient);\n        if (!dots) {\n            return null;\n        }\n        o = o.shape || o.node;\n        if (dots.length) {\n            o.removeChild(fill);\n            fill.on = true;\n            fill.method = \"none\";\n            fill.color = dots[0].color;\n            fill.color2 = dots[dots.length - 1].color;\n            var clrs = [];\n            for (var i = 0, ii = dots.length; i < ii; i++) {\n                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n            }\n            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n            if (type == \"radial\") {\n                fill.type = \"gradientTitle\";\n                fill.focus = \"100%\";\n                fill.focussize = \"0 0\";\n                fill.focusposition = fxfy;\n                fill.angle = 0;\n            } else {\n                // fill.rotate= true;\n                fill.type = \"gradient\";\n                fill.angle = (270 - angle) % 360;\n            }\n            o.appendChild(fill);\n        }\n        return 1;\n    },\n    Element = function (node, vml) {\n        this[0] = this.node = node;\n        node.raphael = true;\n        this.id = R._oid++;\n        node.raphaelid = this.id;\n        this.X = 0;\n        this.Y = 0;\n        this.attrs = {};\n        this.paper = vml;\n        this.matrix = R.matrix();\n        this._ = {\n            transform: [],\n            sx: 1,\n            sy: 1,\n            dx: 0,\n            dy: 0,\n            deg: 0,\n            dirty: 1,\n            dirtyT: 1\n        };\n        !vml.bottom && (vml.bottom = this);\n        this.prev = vml.top;\n        vml.top && (vml.top.next = this);\n        vml.top = this;\n        this.next = null;\n    };\n    var elproto = R.el;\n\n    Element.prototype = elproto;\n    elproto.constructor = Element;\n    elproto.transform = function (tstr) {\n        if (tstr == null) {\n            return this._.transform;\n        }\n        var vbs = this.paper._viewBoxShift,\n            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n            oldt;\n        if (vbs) {\n            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n        }\n        R._extractTransform(this, vbt + tstr);\n        var matrix = this.matrix.clone(),\n            skew = this.skew,\n            o = this.node,\n            split,\n            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n        matrix.translate(1, 1);\n        if (isPatt || isGrad || this.type == \"image\") {\n            skew.matrix = \"1 0 0 1\";\n            skew.offset = \"0 0\";\n            split = matrix.split();\n            if ((isGrad && split.noRotation) || !split.isSimple) {\n                o.style.filter = matrix.toFilter();\n                var bb = this.getBBox(),\n                    bbt = this.getBBox(1),\n                    dx = bb.x - bbt.x,\n                    dy = bb.y - bbt.y;\n                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n                setCoords(this, 1, 1, dx, dy, 0);\n            } else {\n                o.style.filter = E;\n                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n            }\n        } else {\n            o.style.filter = E;\n            skew.matrix = Str(matrix);\n            skew.offset = matrix.offset();\n        }\n        if (oldt !== null) { // empty string value is true as well\n            this._.transform = oldt;\n            R._extractTransform(this, oldt);\n        }\n        return this;\n    };\n    elproto.rotate = function (deg, cx, cy) {\n        if (this.removed) {\n            return this;\n        }\n        if (deg == null) {\n            return;\n        }\n        deg = Str(deg).split(separator);\n        if (deg.length - 1) {\n            cx = toFloat(deg[1]);\n            cy = toFloat(deg[2]);\n        }\n        deg = toFloat(deg[0]);\n        (cy == null) && (cx = cy);\n        if (cx == null || cy == null) {\n            var bbox = this.getBBox(1);\n            cx = bbox.x + bbox.width / 2;\n            cy = bbox.y + bbox.height / 2;\n        }\n        this._.dirtyT = 1;\n        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n        return this;\n    };\n    elproto.translate = function (dx, dy) {\n        if (this.removed) {\n            return this;\n        }\n        dx = Str(dx).split(separator);\n        if (dx.length - 1) {\n            dy = toFloat(dx[1]);\n        }\n        dx = toFloat(dx[0]) || 0;\n        dy = +dy || 0;\n        if (this._.bbox) {\n            this._.bbox.x += dx;\n            this._.bbox.y += dy;\n        }\n        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n        return this;\n    };\n    elproto.scale = function (sx, sy, cx, cy) {\n        if (this.removed) {\n            return this;\n        }\n        sx = Str(sx).split(separator);\n        if (sx.length - 1) {\n            sy = toFloat(sx[1]);\n            cx = toFloat(sx[2]);\n            cy = toFloat(sx[3]);\n            isNaN(cx) && (cx = null);\n            isNaN(cy) && (cy = null);\n        }\n        sx = toFloat(sx[0]);\n        (sy == null) && (sy = sx);\n        (cy == null) && (cx = cy);\n        if (cx == null || cy == null) {\n            var bbox = this.getBBox(1);\n        }\n        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n    \n        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n        this._.dirtyT = 1;\n        return this;\n    };\n    elproto.hide = function () {\n        !this.removed && (this.node.style.display = \"none\");\n        return this;\n    };\n    elproto.show = function () {\n        !this.removed && (this.node.style.display = E);\n        return this;\n    };\n    // Needed to fix the vml setViewBox issues\n    elproto.auxGetBBox = R.el.getBBox;\n    elproto.getBBox = function(){\n      var b = this.auxGetBBox();\n      if (this.paper && this.paper._viewBoxShift)\n      {\n        var c = {};\n        var z = 1/this.paper._viewBoxShift.scale;\n        c.x = b.x - this.paper._viewBoxShift.dx;\n        c.x *= z;\n        c.y = b.y - this.paper._viewBoxShift.dy;\n        c.y *= z;\n        c.width  = b.width  * z;\n        c.height = b.height * z;\n        c.x2 = c.x + c.width;\n        c.y2 = c.y + c.height;\n        return c;\n      }\n      return b;\n    };\n    elproto._getBBox = function () {\n        if (this.removed) {\n            return {};\n        }\n        return {\n            x: this.X + (this.bbx || 0) - this.W / 2,\n            y: this.Y - this.H,\n            width: this.W,\n            height: this.H\n        };\n    };\n    elproto.remove = function () {\n        if (this.removed || !this.node.parentNode) {\n            return;\n        }\n        this.paper.__set__ && this.paper.__set__.exclude(this);\n        R.eve.unbind(\"raphael.*.*.\" + this.id);\n        R._tear(this, this.paper);\n        this.node.parentNode.removeChild(this.node);\n        this.shape && this.shape.parentNode.removeChild(this.shape);\n        for (var i in this) {\n            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n        }\n        this.removed = true;\n    };\n    elproto.attr = function (name, value) {\n        if (this.removed) {\n            return this;\n        }\n        if (name == null) {\n            var res = {};\n            for (var a in this.attrs) if (this.attrs[has](a)) {\n                res[a] = this.attrs[a];\n            }\n            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n            res.transform = this._.transform;\n            return res;\n        }\n        if (value == null && R.is(name, \"string\")) {\n            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n                return this.attrs.gradient;\n            }\n            var names = name.split(separator),\n                out = {};\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                name = names[i];\n                if (name in this.attrs) {\n                    out[name] = this.attrs[name];\n                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n                    out[name] = this.paper.customAttributes[name].def;\n                } else {\n                    out[name] = R._availableAttrs[name];\n                }\n            }\n            return ii - 1 ? out : out[names[0]];\n        }\n        if (this.attrs && value == null && R.is(name, \"array\")) {\n            out = {};\n            for (i = 0, ii = name.length; i < ii; i++) {\n                out[name[i]] = this.attr(name[i]);\n            }\n            return out;\n        }\n        var params;\n        if (value != null) {\n            params = {};\n            params[name] = value;\n        }\n        value == null && R.is(name, \"object\") && (params = name);\n        for (var key in params) {\n            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n        }\n        if (params) {\n            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n                this.attrs[key] = params[key];\n                for (var subkey in par) if (par[has](subkey)) {\n                    params[subkey] = par[subkey];\n                }\n            }\n            // this.paper.canvas.style.display = \"none\";\n            if (params.text && this.type == \"text\") {\n                this.textpath.string = params.text;\n            }\n            setFillAndStroke(this, params);\n            // this.paper.canvas.style.display = E;\n        }\n        return this;\n    };\n    elproto.toFront = function () {\n        !this.removed && this.node.parentNode.appendChild(this.node);\n        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n        return this;\n    };\n    elproto.toBack = function () {\n        if (this.removed) {\n            return this;\n        }\n        if (this.node.parentNode.firstChild != this.node) {\n            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n            R._toback(this, this.paper);\n        }\n        return this;\n    };\n    elproto.insertAfter = function (element) {\n        if (this.removed) {\n            return this;\n        }\n        if (element.constructor == R.st.constructor) {\n            element = element[element.length - 1];\n        }\n        if (element.node.nextSibling) {\n            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n        } else {\n            element.node.parentNode.appendChild(this.node);\n        }\n        R._insertafter(this, element, this.paper);\n        return this;\n    };\n    elproto.insertBefore = function (element) {\n        if (this.removed) {\n            return this;\n        }\n        if (element.constructor == R.st.constructor) {\n            element = element[0];\n        }\n        element.node.parentNode.insertBefore(this.node, element.node);\n        R._insertbefore(this, element, this.paper);\n        return this;\n    };\n    elproto.blur = function (size) {\n        var s = this.node.runtimeStyle,\n            f = s.filter;\n        f = f.replace(blurregexp, E);\n        if (+size !== 0) {\n            this.attrs.blur = size;\n            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n        } else {\n            s.filter = f;\n            s.margin = 0;\n            delete this.attrs.blur;\n        }\n        return this;\n    };\n\n    R._engine.path = function (pathString, vml) {\n        var el = createNode(\"shape\");\n        el.style.cssText = cssDot;\n        el.coordsize = zoom + S + zoom;\n        el.coordorigin = vml.coordorigin;\n        var p = new Element(el, vml),\n            attr = {fill: \"none\", stroke: \"#000\"};\n        pathString && (attr.path = pathString);\n        p.type = \"path\";\n        p.path = [];\n        p.Path = E;\n        setFillAndStroke(p, attr);\n        vml.canvas.appendChild(el);\n        var skew = createNode(\"skew\");\n        skew.on = true;\n        el.appendChild(skew);\n        p.skew = skew;\n        p.transform(E);\n        return p;\n    };\n    R._engine.rect = function (vml, x, y, w, h, r) {\n        var path = R._rectPath(x, y, w, h, r),\n            res = vml.path(path),\n            a = res.attrs;\n        res.X = a.x = x;\n        res.Y = a.y = y;\n        res.W = a.width = w;\n        res.H = a.height = h;\n        a.r = r;\n        a.path = path;\n        res.type = \"rect\";\n        return res;\n    };\n    R._engine.ellipse = function (vml, x, y, rx, ry) {\n        var res = vml.path(),\n            a = res.attrs;\n        res.X = x - rx;\n        res.Y = y - ry;\n        res.W = rx * 2;\n        res.H = ry * 2;\n        res.type = \"ellipse\";\n        setFillAndStroke(res, {\n            cx: x,\n            cy: y,\n            rx: rx,\n            ry: ry\n        });\n        return res;\n    };\n    R._engine.circle = function (vml, x, y, r) {\n        var res = vml.path(),\n            a = res.attrs;\n        res.X = x - r;\n        res.Y = y - r;\n        res.W = res.H = r * 2;\n        res.type = \"circle\";\n        setFillAndStroke(res, {\n            cx: x,\n            cy: y,\n            r: r\n        });\n        return res;\n    };\n    R._engine.image = function (vml, src, x, y, w, h) {\n        var path = R._rectPath(x, y, w, h),\n            res = vml.path(path).attr({stroke: \"none\"}),\n            a = res.attrs,\n            node = res.node,\n            fill = node.getElementsByTagName(fillString)[0];\n        a.src = src;\n        res.X = a.x = x;\n        res.Y = a.y = y;\n        res.W = a.width = w;\n        res.H = a.height = h;\n        a.path = path;\n        res.type = \"image\";\n        fill.parentNode == node && node.removeChild(fill);\n        fill.rotate = true;\n        fill.src = src;\n        fill.type = \"tile\";\n        res._.fillpos = [x, y];\n        res._.fillsize = [w, h];\n        node.appendChild(fill);\n        setCoords(res, 1, 1, 0, 0, 0);\n        return res;\n    };\n    R._engine.text = function (vml, x, y, text) {\n        var el = createNode(\"shape\"),\n            path = createNode(\"path\"),\n            o = createNode(\"textpath\");\n        x = x || 0;\n        y = y || 0;\n        text = text || \"\";\n        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n        path.textpathok = true;\n        o.string = Str(text);\n        o.on = true;\n        el.style.cssText = cssDot;\n        el.coordsize = zoom + S + zoom;\n        el.coordorigin = \"0 0\";\n        var p = new Element(el, vml),\n            attr = {\n                fill: \"#000\",\n                stroke: \"none\",\n                font: R._availableAttrs.font,\n                text: text\n            };\n        p.shape = el;\n        p.path = path;\n        p.textpath = o;\n        p.type = \"text\";\n        p.attrs.text = Str(text);\n        p.attrs.x = x;\n        p.attrs.y = y;\n        p.attrs.w = 1;\n        p.attrs.h = 1;\n        setFillAndStroke(p, attr);\n        el.appendChild(o);\n        el.appendChild(path);\n        vml.canvas.appendChild(el);\n        var skew = createNode(\"skew\");\n        skew.on = true;\n        el.appendChild(skew);\n        p.skew = skew;\n        p.transform(E);\n        return p;\n    };\n    R._engine.setSize = function (width, height) {\n        var cs = this.canvas.style;\n        this.width = width;\n        this.height = height;\n        width == +width && (width += \"px\");\n        height == +height && (height += \"px\");\n        cs.width = width;\n        cs.height = height;\n        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n        if (this._viewBox) {\n            R._engine.setViewBox.apply(this, this._viewBox);\n        }\n        return this;\n    };\n    R._engine.setViewBox = function (x, y, w, h, fit) {\n        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n        var paperSize = this.getSize(),\n            width = paperSize.width,\n            height = paperSize.height,\n            H, W;\n        if (fit) {\n            H = height / h;\n            W = width / w;\n            if (w * H < width) {\n                x -= (width - w * H) / 2 / H;\n            }\n            if (h * W < height) {\n                y -= (height - h * W) / 2 / W;\n            }\n        }\n        this._viewBox = [x, y, w, h, !!fit];\n        this._viewBoxShift = {\n            dx: -x,\n            dy: -y,\n            scale: paperSize\n        };\n        this.forEach(function (el) {\n            el.transform(\"...\");\n        });\n        return this;\n    };\n    var createNode;\n    R._engine.initWin = function (win) {\n            var doc = win.document;\n            if (doc.styleSheets.length < 31) {\n                doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n            } else {\n                // no more room, add to the existing one\n                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n                doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n            }\n            try {\n                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n                createNode = function (tagName) {\n                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n                };\n            } catch (e) {\n                createNode = function (tagName) {\n                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n                };\n            }\n        };\n    R._engine.initWin(R._g.win);\n    R._engine.create = function () {\n        var con = R._getContainer.apply(0, arguments),\n            container = con.container,\n            height = con.height,\n            s,\n            width = con.width,\n            x = con.x,\n            y = con.y;\n        if (!container) {\n            throw new Error(\"VML container not found.\");\n        }\n        var res = new R._Paper,\n            c = res.canvas = R._g.doc.createElement(\"div\"),\n            cs = c.style;\n        x = x || 0;\n        y = y || 0;\n        width = width || 512;\n        height = height || 342;\n        res.width = width;\n        res.height = height;\n        width == +width && (width += \"px\");\n        height == +height && (height += \"px\");\n        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n        res.coordorigin = \"0 0\";\n        res.span = R._g.doc.createElement(\"span\");\n        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n        c.appendChild(res.span);\n        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n        if (container == 1) {\n            R._g.doc.body.appendChild(c);\n            cs.left = x + \"px\";\n            cs.top = y + \"px\";\n            cs.position = \"absolute\";\n        } else {\n            if (container.firstChild) {\n                container.insertBefore(c, container.firstChild);\n            } else {\n                container.appendChild(c);\n            }\n        }\n        res.renderfix = function () {};\n        return res;\n    };\n    R.prototype.clear = function () {\n        R.eve(\"raphael.clear\", this);\n        this.canvas.innerHTML = E;\n        this.span = R._g.doc.createElement(\"span\");\n        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n        this.canvas.appendChild(this.span);\n        this.bottom = this.top = null;\n    };\n    R.prototype.remove = function () {\n        R.eve(\"raphael.remove\", this);\n        this.canvas.parentNode.removeChild(this.canvas);\n        for (var i in this) {\n            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n        }\n        return true;\n    };\n\n    var setproto = R.st;\n    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n        setproto[method] = (function (methodname) {\n            return function () {\n                var arg = arguments;\n                return this.forEach(function (el) {\n                    el[methodname].apply(el, arg);\n                });\n            };\n        })(method);\n    }\n})();\n\n    // EXPOSE\n    // SVG and VML are appended just before the EXPOSE line\n    // Even with AMD, Raphael should be defined globally\n    oldRaphael.was ? (g.win.Raphael = R) : (Raphael = R);\n\n    if(typeof exports == \"object\"){\n        module.exports = R;\n    }\n    return R;\n}));\n"],"sourceRoot":"/source/"}